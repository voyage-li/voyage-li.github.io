<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twilight</title>
  
  
  <link href="https://voyage-li.github.io/atom.xml" rel="self"/>
  
  <link href="https://voyage-li.github.io/"/>
  <updated>2022-11-12T16:00:00.000Z</updated>
  <id>https://voyage-li.github.io/</id>
  
  <author>
    <name>voyage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oldstory</title>
    <link href="https://voyage-li.github.io/2022/11/13/oldStory/"/>
    <id>https://voyage-li.github.io/2022/11/13/oldStory/</id>
    <published>2022-11-12T16:00:00.000Z</published>
    <updated>2022-11-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <p style="text-align:center;font-weight:bolder">白苎新袍入嫩凉。春蚕食叶响回廊。禹门已准桃花浪，月殿先收桂子香。<br>鹏北海，凤朝阳。又携书剑路茫茫。明年此日青云去，却笑人间举子忙。</p> --><p>有时间再写</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;!-- &lt;p style=&quot;text-align:center;font-weight:bolder&quot;&gt;
白苎新袍入嫩凉。春蚕食叶响回廊。禹门已准桃花浪，月殿先收桂子香。&lt;br&gt;
鹏北海，凤朝阳。又携书剑路茫茫。明年此日青云去，却笑人间举子忙。&lt;/p&gt; --&gt;
&lt;p&gt;有时间再写&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>流水线cpu设计</title>
    <link href="https://voyage-li.github.io/2022/07/01/codlab/"/>
    <id>https://voyage-li.github.io/2022/07/01/codlab/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-06-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>计算机组成原理 实验(llxx 老师)</strong></p></blockquote><p>虽然说<code>verilog</code>语言使用有诸多困难，但计算机组成原理课程的学习还是很有意思的，亲手(应该是)写一个 cpu 的感觉还是很有收获的，介绍介绍我的这个学期的实验</p><!-- ![](https://img1.imgtp.com/2023/03/15/xQJJZgc4.png) --><span id="more"></span>        <h3 id="lab1-运算器及其应用"   >          <a href="#lab1-运算器及其应用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lab1-运算器及其应用"></a> Lab1 运算器及其应用</h3>      <ul><li>完成 ALU 模块的逻辑设计和仿真</li><li>查看 32 位 ALU 的 RTL 和综合电路图，以及综合电路资源和时间性能报告</li><li>完成 6 位 ALU 的下载测试，并查看 RTL 电路图，以及实现电路资源和时间性能报告</li><li>完成 FLS 的逻辑设计、仿真和下载测试    <div class="note-plugin info no-icon">            <p>本次实验主要是复习<code>verilog</code>的相关语法，为后续实验打下基础</p>    </div>  </li></ul>        <h3 id="lab2-寄存器堆与存储器及其应用"   >          <a href="#lab2-寄存器堆与存储器及其应用" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lab2-寄存器堆与存储器及其应用"></a> Lab2 寄存器堆与存储器及其应用</h3>      <ul><li>行为方式参数化描述寄存器堆，功能仿真</li><li>IP 例化分布式和块式 16 x 8 位单端口 RAM，功能仿真和对比</li><li>设计 FIFO 队列电路的数据通路和控制器，结构化方式描述数据通路，Moore 型 FSM 描述控制器，功能仿真</li><li>FIFO 队列电路下载至 FPGA 中测试    <div class="note-plugin info no-icon">            <p>同样是对数电学习内容的复习，学会了设计不同的仿真函数，debug 的方法</p>    </div>  </li></ul>        <h3 id="lab3-汇编程序设计"   >          <a href="#lab3-汇编程序设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lab3-汇编程序设计"></a> Lab3 汇编程序设计</h3>      <ul><li>熟悉 RISC-V 汇编指令的格式</li><li>熟悉 CPU 仿真软件 Ripes，理解汇编指令执行的基本原理（数据通路和控制器的协调工作过程）</li><li>熟悉汇编程序的基本结构，掌握简单汇编程序的设计</li><li>掌握汇编仿真软件 RARS(RISC-V Assembler &amp; Runtime Simulator)的使用方法，会用该软件进行汇编程序的仿真、调试以及生成 CPU 测试需要的指令和数据文件（COE）</li><li>理解 CPU 调试模块 PDU 的使用方法    <div class="note-plugin info no-icon">            <p>较为简单的一次实验，主要是考察使用汇编解决问题的能力</p>    </div>  </li></ul>        <h3 id="lab4-单周期-cpu-设计"   >          <a href="#lab4-单周期-cpu-设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lab4-单周期-cpu-设计"></a> Lab4 单周期 CPU 设计</h3>      <ul><li>理解 CPU 的结构和工作原理</li><li>掌握单周期 CPU 的设计和调试方法</li><li>熟练掌握数据通路和控制器的设计和描述方法    <div class="note-plugin info no-icon">            <p>本次实验是<code>verilog</code>噩梦的开始，明明都按照设计写出来的东西，却不能达到预期的结果，但好在还是调试出来了</p>    </div>  </li></ul>        <h3 id="lab5-流水线-cpu-设计"   >          <a href="#lab5-流水线-cpu-设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lab5-流水线-cpu-设计"></a> Lab5 流水线 CPU 设计</h3>      <ul><li>理解流水线 CPU 的结构和工作原理</li><li>掌握流水线 CPU 的设计和调试方法，特别是流水线中数据相关和控制相关的处理</li><li>熟练掌握数据通路和控制器的设计和描述方法    <div class="note-plugin info no-icon">            <p>基本思路和前一次实验相同，就是把课内学习的知识投入实践，但流水线带来了诸多问题，处理各种冒险的过程还是很有意思的，尤其是最后处理完所有问题，上 fpga 运行成功以后，虽然花了十几个小时</p>    </div>  </li></ul>        <h3 id="lab6-综合设计"   >          <a href="#lab6-综合设计" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#lab6-综合设计"></a> Lab6 综合设计</h3>      <ul><li>理解计算机硬件系统的组成结构和工作原理</li><li>掌握软硬件综合系统的设计和调试方法    <div class="note-plugin info no-icon">            <p>实现了更多的指令，同时加入了 cache</p>    </div>  </li></ul>        <h3 id="详细代码"   >          <a href="#详细代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#详细代码"></a> 详细代码</h3>      <p>      详细的实验报告可以看:<a href="https://github.com/voyage-li/ustc_life/tree/main/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;计算机组成原理 实验(llxx 老师)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然说&lt;code&gt;verilog&lt;/code&gt;语言使用有诸多困难，但计算机组成原理课程的学习还是很有意思的，亲手(应该是)写一个 cpu 的感觉还是很有收获的，介绍介绍我的这个学期的实验&lt;/p&gt;
&lt;!-- ![](https://img1.imgtp.com/2023/03/15/xQJJZgc4.png) --&gt;</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://voyage-li.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>迷你操作系统设计</title>
    <link href="https://voyage-li.github.io/2022/07/01/oslab/"/>
    <id>https://voyage-li.github.io/2022/07/01/oslab/</id>
    <published>2022-06-30T16:00:00.000Z</published>
    <updated>2022-06-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>操作系统 实验(cxl 老师)</strong></p></blockquote><p>上了一个学期的操作系统，总算也是拼拼凑凑整了个玩具操作系统，写一篇文章来记录一下，本文就按照实验的顺序，介绍一下一个学期的成果吧</p><!-- ![](https://img1.imgtp.com/2023/03/15/QGdLqR1r.png) --><span id="more"></span><ul><li>本文的实验均在<code>wsl2+Unbuntu</code>的环境下完成</li><li>使用<code>qemu-system-i386</code></li></ul>        <h3 id="实验一start"   >          <a href="#实验一start" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实验一start"></a> 实验一：Start</h3>      <ul><li>使用 multiboot 协议，借助 qemu 实现 VGA 的简单输出</li><li><code>movx source, destination</code><ul><li><code>movl</code>: 32 位</li><li><code>movw</code>: 16 位</li><li><code>movb</code>:  8  位</li></ul></li><li>VGA 的输出：<ul><li>使用<code>movl $0x2f4b2f4f, 0xB8000</code>的格式，其中，前串字符表示输出的字符，后字符串表示输出的地址</li><li>其中，每个字符需要 2 个字节，一个存放 ASCII 码，一个存放字符的显示颜色</li></ul></li><li>串口的输出：使用以下格式<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movb $0x46, %al /* 输出字母F */</span><br><span class="line">movw $0x3F8, %dx</span><br><span class="line">outb %al, %dx /* put char */</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="实验二multiboot2mymain"   >          <a href="#实验二multiboot2mymain" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实验二multiboot2mymain"></a> 实验二：Multiboot2myMain</h3>      <ul><li>在源代码的语言层面，完成从汇编语言到 C 语言的衔接</li><li>在功能上，实现清屏、格式化输入输出，设备包括 VGA 和串口，接口符合要求<ul><li>可以直接修改指针指向地址的值，以此实现修改 VGA 的输出，例如<figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_char2pos</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> c, <span class="keyword">int</span> color, <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    data += color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    data += c;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> *p;</span><br><span class="line">    p = (<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> *)(pos * <span class="number">2</span> + VGA_BASE);</span><br><span class="line">    *p = data;</span><br><span class="line">    set_cursor_pos(pos + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul></li><li>在软件层次和结构上，完成 multiboot_header、myOS 和 userApp 的划分，体现在文件目录组织和 Makefile 组织上</li></ul>        <h3 id="实验三shellinterrupttimer"   >          <a href="#实验三shellinterrupttimer" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实验三shellinterrupttimer"></a> 实验三：shell&amp;Interrupt&amp;timer</h3>      <ul><li>简单的 shell 程序，提供 cmd 和 help 命令，允许注册新的命令</li><li>中断机制和中断控制器 i8259A 初始化</li><li>时钟 i8253 和周期性时钟中断</li><li>VGA 输出的调整：<ul><li>左下角：时钟中断之外的其他中断，一律输出“unknown interrupt”</li><li>右下角：从某个时间开始，大约每秒更新一次格式为：HH:MM:SS</li></ul></li></ul>        <h3 id="实验四memory-management"   >          <a href="#实验四memory-management" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实验四memory-management"></a> 实验四：Memory Management</h3>      <ul><li>内存检测，确定动态内存的范围</li><li>提供动态分区管理机制 dPartition</li><li>提供等大小固定分区管理机制 ePartition</li><li>使用动态分区管理机制来管理所有动态内存</li><li>提供 kmalloc/kfree 和 malloc/free 两套接口，分别提供给内核和用户</li></ul>        <h3 id="实验五taskmanager-fcfs"   >          <a href="#实验五taskmanager-fcfs" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实验五taskmanager-fcfs"></a> 实验五：TaskManager &amp; FCFS</h3>      <ul><li>任务管理器</li><li>任务数据结构</li><li>任务池：数据结构的静态 or 动态管理</li><li>任务创建/销毁，任务启动和终止</li><li>上下文切换</li><li>idle 任务、init 任务</li><li>调度器 FCFS</li><li>初始化完成后，转入多任务状态运行</li></ul>        <h3 id="实验六scheduler"   >          <a href="#实验六scheduler" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#实验六scheduler"></a> 实验六：Scheduler</h3>      <ul><li>调度算法，至少 2 种（不含 FCFS）</li><li>任务管理器<ul><li>任务数据结构</li><li>任务创建/销毁</li><li>调度器</li></ul></li></ul>        <h3 id="详细代码请看"   >          <a href="#详细代码请看" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#详细代码请看"></a> 详细代码：请看</h3>      <p>      详细的实验报告可以看:<a href="https://github.com/voyage-li/ustc_life/tree/main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E4%B8%8E%E8%AE%BE%E8%AE%A1/lab">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;操作系统 实验(cxl 老师)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上了一个学期的操作系统，总算也是拼拼凑凑整了个玩具操作系统，写一篇文章来记录一下，本文就按照实验的顺序，介绍一下一个学期的成果吧&lt;/p&gt;
&lt;!-- ![](https://img1.imgtp.com/2023/03/15/QGdLqR1r.png) --&gt;</summary>
    
    
    
    <category term="操作系统" scheme="https://voyage-li.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>我的世界红石钢琴</title>
    <link href="https://voyage-li.github.io/2022/05/20/mc-piano/"/>
    <id>https://voyage-li.github.io/2022/05/20/mc-piano/</id>
    <published>2022-05-20T15:39:07.000Z</published>
    <updated>2022-05-20T15:39:07.000Z</updated>
    
    <content type="html"><![CDATA[<video src='/images/mc/Trim.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video><span id="more"></span>        <h3 id="一-教学环境"   >          <a href="#一-教学环境" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-教学环境"></a> 一、教学环境</h3>      <ul><li>版本: 1.14.4(java 版本)</li></ul>        <h3 id="二-前置知识"   >          <a href="#二-前置知识" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-前置知识"></a> 二、前置知识</h3>      <ul><li>基本的<code>mcfunction</code>相关知识</li><li>基本的乐理</li></ul>        <h3 id="三-搭建钢琴"   >          <a href="#三-搭建钢琴" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-搭建钢琴"></a> 三、搭建钢琴</h3>      <ul><li>在游戏中搭建一个看起来和钢琴一样的东西(无需教学)</li><li>可以使用<code>setblock</code>指令，快捷生成</li></ul>        <h3 id="四-音乐资源"   >          <a href="#四-音乐资源" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-音乐资源"></a> 四、音乐资源</h3>      <ul><li>可以使用本仓库中的材质包</li><li>将材质包添加的游戏中</li><li>使用<code>playsound</code>函数播放音乐资源<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playsound minecraft:piano.21 voice @p ~ ~ ~ 30</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="五-演奏的实现"   >          <a href="#五-演奏的实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#五-演奏的实现"></a> 五、演奏的实现</h3>      <ul><li>首先音乐需要按顺序播放，此处内容在<a href="https://voyage-li.github.io/2021/07/18/MC-RED/#%E5%85%AB-%E8%A1%A5%E5%85%85">红石特效</a>文章已经讲述，可以直接点击链接跳转</li><li>关于触发<ul><li>直接在一个时间点播放对应的音乐固然能够达到红石钢琴的效果，但是这样明显达到不了本篇文章开头的效果</li><li>用下降的红石来触发播放音乐函数<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">summon falling_block -293 45 63 &#123;BlockState:&#123;Name:<span class="string">&quot;minecraft:redstone_block&quot;</span>&#125;,Time:30&#125;</span><br></pre></td></tr></table></div></figure></li><li>将方块变成半砖再复原的形式模拟按键<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fill ~-1 ~3 ~ ~-10 ~3 ~ minecraft:quartz_slab</span><br><span class="line">fill ~-7 ~3 ~-1 ~-10 ~3 ~-1 minecraft:quartz_stairs[facing=north]</span><br><span class="line">fill ~3 ~1 ~ ~-6 ~1 ~ minecraft:quartz_block</span><br><span class="line">fill ~-3 ~1 ~1 ~-6 ~1 ~1 minecraft:quartz_block</span><br><span class="line">fill ~-3 ~1 ~-1 ~-6 ~1 ~-1 minecraft:quartz_block</span><br></pre></td></tr></table></div></figure></li></ul></li><li>在触发播放音乐效果的同时，可以带上一定的粒子效果</li><li>然后就是枯燥的扒谱，根据时间，播放不同的音乐了</li></ul>        <h3 id="六-效果展示"   >          <a href="#六-效果展示" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六-效果展示"></a> 六、效果展示</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/images/mc/last.png"  alt="" />      </p><p>      <mark>看开头的视频</mark></p>        <h3 id="七-存档及代码"   >          <a href="#七-存档及代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#七-存档及代码"></a> 七、存档及代码</h3>      <p>      <a href="https://github.com/voyage-li/Minecraft_piano">仓库地址</a></p>]]></content>
    
    
    <summary type="html">&lt;video src=&#39;/images/mc/Trim.mp4&#39; type=&#39;video/mp4&#39; controls=&#39;controls&#39;  width=&#39;100%&#39; height=&#39;100%&#39;&gt;
&lt;/video&gt;</summary>
    
    
    
    <category term="游戏" scheme="https://voyage-li.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="minecraft" scheme="https://voyage-li.github.io/categories/%E6%B8%B8%E6%88%8F/minecraft/"/>
    
    
    <category term="mcfunction" scheme="https://voyage-li.github.io/tags/mcfunction/"/>
    
  </entry>
  
  <entry>
    <title>模拟手写字迹</title>
    <link href="https://voyage-li.github.io/2022/04/24/handwrite/"/>
    <id>https://voyage-li.github.io/2022/04/24/handwrite/</id>
    <published>2022-04-24T09:12:06.000Z</published>
    <updated>2022-04-24T09:12:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>       写操作系统作业的时候突发奇想，为什么要重复这种体力劳动呢，所以就有了这个东西，而当前网络上可以搜索到的模拟手写的程序都不适配 markdown 的语法，这对一个合格的 cs 学生来说是不可以忍受的，所以加上了适配 markdown 语法的功能。</p>        <h3 id="一-手写模拟部分"   >          <a href="#一-手写模拟部分" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-手写模拟部分"></a> 一、手写模拟部分</h3>      <ul><li>使用<code>PIL</code>库，调用准备好的字库，进行书写</li><li>由于是模拟人的输入，所以在输出时给每个字赋上随机的偏移，更贴近实际情况<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置字体格式大小等参数</span></span><br><span class="line">PIL.ImageFont.truetype(font=<span class="literal">None</span>, size=<span class="number">10</span>, index=<span class="number">0</span>, encoding=<span class="string">&#x27;&#x27;</span>, layout_engine=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 创建可用于绘制给定图像的对象</span></span><br><span class="line">PIL.ImageDraw.Draw(im, mode=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 在给定位置绘制字符串</span></span><br><span class="line">PIL.ImageDraw.ImageDraw.text(xy, text, fill=<span class="literal">None</span>, font=<span class="literal">None</span>, anchor=<span class="literal">None</span>, spacing=<span class="number">4</span>,    align=<span class="string">&quot;left&quot;</span>, direction=<span class="literal">None</span>, features=<span class="literal">None</span>, language=<span class="literal">None</span>, stroke_width=<span class="number">0</span>,    stroke_fill=<span class="literal">None</span>)</span><br></pre></td></tr></table></div></figure></li></ul><span id="more"></span>        <h3 id="二-markdown-的相关处理"   >          <a href="#二-markdown-的相关处理" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-markdown-的相关处理"></a> 二、markdown 的相关处理</h3>      <ul><li>使用正则表达式<code>re</code>库</li><li>分析需求，程序应该只需要处理标题，列表等功能，而对于超链接，插入图片，字体加粗删除斜体等功能，不是这个程序需要实现的功能</li><li>对于标题，先使用正则表达式检测，然后控制输出字体的大小</li><li>使用<code>re.sub()</code>函数，将源文件中的所有字体格式删除</li><li>对于列表功能，本程序使用较为笨拙的方法，在正则表达式匹配到列表相关内容时，在文本中空出相应的空格，并用特殊字符标记，以便最后输出<figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate</span>(<span class="params">txt</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(txt, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    string = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.txt&#x27;</span> <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">return</span> string</span><br><span class="line">    <span class="comment"># 直接去掉所有有标题的内容</span></span><br><span class="line">    string = re.sub(<span class="string">r&#x27;(#&#123;1,6&#125;) (.+)&#x27;</span>, tittle, string)</span><br><span class="line">    <span class="comment"># 有序无序在一起会很丑陋</span></span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n][\-\+\*] (.+)&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;\n&#x27;</span>+<span class="string">&#x27; ● &#x27;</span> + x.group(<span class="number">1</span>), string)</span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n][\ ]&#123;4&#125;[\-\+\*] (.+)&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;\n    &#x27;</span>+<span class="string">&#x27; ○ &#x27;</span> + x.group    (<span class="number">1</span>), string)</span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n][\ ]&#123;8&#125;[\-\+\*] (.+)&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;\n        &#x27;</span>+<span class="string">&#x27; ■ &#x27;</span> + x. group(<span class="number">1</span>), string)</span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n](\d.) (.+)&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">&#x27;\n &#x27;</span>+x.group(<span class="number">1</span>)+x.group(<span class="number">2</span>),  string)</span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n][\ ]&#123;4&#125;(\d). (.+)&#x27;</span>, list_sub_2, string)</span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n][\ ]&#123;8&#125;(\d). (.+)&#x27;</span>, list_sub_3, string)</span><br><span class="line">    string = re.sub(<span class="string">r&#x27;[.\n][\ ]&#123;12&#125;(\d). (.+)&#x27;</span>, list_sub_4, string)</span><br><span class="line">    <span class="comment"># 去掉链接</span></span><br><span class="line">    string = re.sub(<span class="string">r&#x27;\[(.+)\]\((.+)\)&#x27;</span>, <span class="keyword">lambda</span> x: x.group(<span class="number">1</span>)+<span class="string">&#x27;(&#x27;</span>+x.group(<span class="number">2</span>)+<span class="string">&#x27;)&#x27;</span>,   string)</span><br><span class="line">    <span class="comment"># 去掉text内容</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">iter</span> <span class="keyword">in</span> text_re:</span><br><span class="line">        string = re.sub(<span class="built_in">iter</span>, <span class="keyword">lambda</span> x: x.group(<span class="number">1</span>), string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> string</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="三-图形化功能"   >          <a href="#三-图形化功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-图形化功能"></a> 三、图形化功能</h3>      <ul><li>考虑到实际使用的体验，程序应该拥有图形化界面，便于操作</li><li>使用<code>pyqt</code>直接拖动控件设计图形化界面，将最后的<code>mainwindows.ui</code>文件导出，使用<code>pyuic5</code>获得<code>mainwindow.py</code></li><li>最后将 ui 界面的相关接口和主程序代码链接在一起</li></ul>        <h3 id="四-源代码"   >          <a href="#四-源代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-源代码"></a> 四、源代码</h3>      <p>      <a href="https://github.com/voyage-li/HandWrite">戳这里</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;       写操作系统作业的时候突发奇想，为什么要重复这种体力劳动呢，所以就有了这个东西，而当前网络上可以搜索到的模拟手写的程序都不适配 markdown 的语法，这对一个合格的 cs 学生来说是不可以忍受的，所以加上了适配 markdown 语法的功能。&lt;/p&gt;

        &lt;h3 id=&quot;一-手写模拟部分&quot;   &gt;
          &lt;a href=&quot;#一-手写模拟部分&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-手写模拟部分&quot;&gt;&lt;/a&gt; 一、手写模拟部分&lt;/h3&gt;
      
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;PIL&lt;/code&gt;库，调用准备好的字库，进行书写&lt;/li&gt;
&lt;li&gt;由于是模拟人的输入，所以在输出时给每个字赋上随机的偏移，更贴近实际情况&lt;figure class=&quot;highlight python&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置字体格式大小等参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIL.ImageFont.truetype(font=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, size=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, index=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, encoding=&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, layout_engine=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建可用于绘制给定图像的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIL.ImageDraw.Draw(im, mode=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在给定位置绘制字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIL.ImageDraw.ImageDraw.text(xy, text, fill=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, font=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, anchor=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, spacing=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,    align=&lt;span class=&quot;string&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;, direction=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, features=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, language=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, stroke_width=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,    stroke_fill=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="python" scheme="https://voyage-li.github.io/categories/python/"/>
    
    
    <category term="pyqt" scheme="https://voyage-li.github.io/tags/pyqt/"/>
    
    <category term="正则表达式" scheme="https://voyage-li.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>git使用记录</title>
    <link href="https://voyage-li.github.io/2022/03/23/git/"/>
    <id>https://voyage-li.github.io/2022/03/23/git/</id>
    <published>2022-03-23T09:33:29.000Z</published>
    <updated>2025-08-12T13:11:35.562Z</updated>
    
    <content type="html"><![CDATA[<p>记录 git 的使用过程中遇到的问题</p>        <h3 id="合并仓库"   >          <a href="#合并仓库" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#合并仓库"></a> 合并仓库</h3>      <p>记录合并 git 仓库的方法，主要就是根据网上查找的</p>        <h5 id="目录情况"   >          <a href="#目录情况" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#目录情况"></a> 目录情况:</h5>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/temp/</span><br><span class="line">    ├── A</span><br><span class="line">    └── B</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h5 id="具体步骤"   >          <a href="#具体步骤" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#具体步骤"></a> 具体步骤</h5>      <ul><li><p>将 B 合并到 A</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> temp/A</span><br><span class="line">git remote add other ../B/</span><br><span class="line">git fetch other</span><br><span class="line">git checkout -b B other/main</span><br><span class="line">git checkout main</span><br><span class="line">git merge B --allow-unrelated-histories</span><br></pre></td></tr></table></div></figure></li><li><p>处理冲突</p><p>直接打开 vscode，点一点，或者 vim 删除不需要的部分，之后(记得 git add)</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;merge A&amp;B&quot;</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h5 id="善后"   >          <a href="#善后" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#善后"></a> 善后</h5>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">git remote remove other</span><br><span class="line">git branch</span><br><span class="line">git branch -D B</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录 git 的使用过程中遇到的问题&lt;/p&gt;

        &lt;h3 id=&quot;合并仓库&quot;   &gt;
          &lt;a href=&quot;#合并仓库&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#合并仓库&quot;&gt;&lt;/a&gt; 合并仓库&lt;/h3&gt;
      
&lt;p&gt;记录合并 git 仓库的方法，主要就是根据网上查找的&lt;/p&gt;

        &lt;h5 id=&quot;目录情况&quot;   &gt;
          &lt;a href=&quot;#目录情况&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#目录情况&quot;&gt;&lt;/a&gt; 目录情况:&lt;/h5&gt;
      
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/temp/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://voyage-li.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>wsl2使用windows代理</title>
    <link href="https://voyage-li.github.io/2022/02/21/clash/"/>
    <id>https://voyage-li.github.io/2022/02/21/clash/</id>
    <published>2022-02-20T16:00:00.000Z</published>
    <updated>2022-02-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 wsl2 克隆的过程中经常因为奇慢无比的速度而抓狂，查阅了相关资料之后，找出对自己有效的 wsl2 走 windows 代理的方法<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/02/27/T39PQYMHkuD8m6F.jpg"  alt="git.jpg" />      </p><span id="more"></span>        <h3 id="一-前置"   >          <a href="#一-前置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-前置"></a> 一、前置</h3>      <p>这里使用的是 clash for windows，注意需要打开允许局域网，打开的时候可能发现，鼠标悬停在开关上时，能看到 wsl 的 ip</p>        <h3 id="二-具体实施"   >          <a href="#二-具体实施" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-具体实施"></a> 二、具体实施</h3>      <p>在 wsl 终端输入:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></div></figure><p>可以查看 hostip:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:</span></span><br><span class="line"><span class="comment"># [network]</span></span><br><span class="line"><span class="comment"># generateResolvConf = false</span></span><br><span class="line">nameserver 172.24.32.1</span><br></pre></td></tr></table></div></figure><p>此后输入</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line"><span class="comment">#hostip为刚才查询的ip，后面的端口号 clash默认为 7890</span></span><br></pre></td></tr></table></div></figure>        <h3 id="三-写成脚本"   >          <a href="#三-写成脚本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-写成脚本"></a> 三、写成脚本</h3>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config.fish</span></span><br><span class="line"><span class="built_in">set</span> host_ip (cat /etc/resolv.conf |grep <span class="string">&quot;nameserver&quot;</span> |cut -f 2 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">alias</span> setproxy <span class="string">&quot;export all_proxy=http://<span class="variable">$host_ip</span>:7890 &amp;&amp; export http_proxy=http://<span class="variable">$host_ip</span>:7890 &amp;&amp; export https_proxy=http://<span class="variable">$host_ip</span>:7890&quot;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">unset</span> <span class="string">&quot;set --erase&quot;</span> <span class="comment"># fish-shell使用unset需要 set --erase</span></span><br><span class="line"><span class="built_in">alias</span> unsetproxy <span class="string">&quot;unset all_proxy &amp;&amp; unset http_proxy &amp;&amp; unset https_proxy&quot;</span></span><br></pre></td></tr></table></div></figure><p>将上述内容写入 fish-shell 配置文件，使用 setproxy 打开代理，unsetproxy 关闭代理</p>        <h3 id="四-检测成果"   >          <a href="#四-检测成果" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-检测成果"></a> 四、检测成果</h3>      <p>测试的方法有很多，比如:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget youtube.com</span><br></pre></td></tr></table></div></figure><p>或者</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w3m www.google.com</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 wsl2 克隆的过程中经常因为奇慢无比的速度而抓狂，查阅了相关资料之后，找出对自己有效的 wsl2 走 windows 代理的方法&lt;br /&gt;

        &lt;img   class=&quot;lazyload lazyload-gif&quot;
          src=&quot;/images/loading.svg&quot; data-src=&quot;https://s2.loli.net/2022/02/27/T39PQYMHkuD8m6F.jpg&quot;  alt=&quot;git.jpg&quot; /&gt;
      &lt;/p&gt;</summary>
    
    
    
    <category term="shell" scheme="https://voyage-li.github.io/categories/shell/"/>
    
    
    <category term="wsl2" scheme="https://voyage-li.github.io/tags/wsl2/"/>
    
  </entry>
  
  <entry>
    <title>fish shell使用心得</title>
    <link href="https://voyage-li.github.io/2022/01/25/fish-shell/"/>
    <id>https://voyage-li.github.io/2022/01/25/fish-shell/</id>
    <published>2022-01-24T16:00:00.000Z</published>
    <updated>2025-08-12T13:11:35.562Z</updated>
    
    <content type="html"><![CDATA[<p>阴差阳错的，就用上了 fish，然后就不想换别的了，但是 fish 不兼容很多的 bash 脚本，与网上主流教程有一些区别，在这里记录我使用 fish 踩的坑</p><!-- ![fish.png](https://s2.loli.net/2022/01/25/y59mJL4gXH3EhkC.png) -->        <h3 id="一-fish-shell-简介"   >          <a href="#一-fish-shell-简介" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-fish-shell-简介"></a> 一、fish shell 简介</h3>      <ul><li>全名: <a href="https://fishshell.com/">the friendly interactive shell</a></li><li>ubuntu 下安装(其它同理)</li></ul><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fish</span><br></pre></td></tr></table></div></figure><span id="more"></span>        <h3 id="二-基本配置"   >          <a href="#二-基本配置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-基本配置"></a> 二、基本配置</h3>              <h4 id="1-颜色主题"   >          <a href="#1-颜色主题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-颜色主题"></a> 1. 颜色主题</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></div></figure><p>    进入网页端设置界面，设置自己喜欢的颜色主题<br />    我的配置: <a href="https://github.com/voyage-li/my_study/blob/master/Missing-Semester/fish_prompt.fish">fish_prompt.fish</a></p>        <h4 id="2-欢迎页面"   >          <a href="#2-欢迎页面" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-欢迎页面"></a> 2. 欢迎页面</h4>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.config/fish/functions/fish_greeting.fish</span></span><br><span class="line"><span class="keyword">function</span> fish_greeting</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;欢迎文本&quot;</span></span><br><span class="line">    <span class="comment"># 可选项:</span></span><br><span class="line">    <span class="comment"># date （当前时间信息）</span></span><br><span class="line">    <span class="comment"># neofetch (显示运行状态，需要安装 neofetch ，换成 screenfetch 同理)</span></span><br><span class="line">end</span><br></pre></td></tr></table></div></figure>        <h3 id="三-函数"   >          <a href="#三-函数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-函数"></a> 三、函数</h3>              <h4 id="1-基本格式"   >          <a href="#1-基本格式" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-基本格式"></a> 1. 基本格式</h4>      <p>仿照前面欢迎界面的格式</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> hello</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;hello fish shell&quot;</span></span><br><span class="line">end</span><br></pre></td></tr></table></div></figure>    <div class="note-plugin info no-icon">            <p>当你直接运行 bash 脚本时，fish 会提示不兼容的地方以及修改方法</p>    </div>          <h4 id="2-命令行参数"   >          <a href="#2-命令行参数" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-命令行参数"></a> 2. 命令行参数</h4>      <p>使用<code>$argv[num]</code>的形式获得命令行参数，<code>$status</code>获取返回值，<code>count</code>输出参数数量，示例函数如下</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test_argv</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$argv</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$argv</span>[1] <span class="variable">$argv</span>[2]</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$argv</span>[3]</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$status</span></span><br><span class="line">    count <span class="variable">$argv</span></span><br><span class="line">end</span><br></pre></td></tr></table></div></figure><p>调用:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_argv 测试 一下 命令行</span><br></pre></td></tr></table></div></figure><p>输出:</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试 一下 命令行</span><br><span class="line">测试 一下</span><br><span class="line">命令行</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></div></figure>        <h4 id="3-语法"   >          <a href="#3-语法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-语法"></a> 3. 语法</h4>              <h5 id="a-if-语句"   >          <a href="#a-if-语句" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#a-if-语句"></a> a. if 语句</h5>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test_if</span><br><span class="line">    <span class="keyword">if</span> [ (count <span class="variable">$argv</span>) -eq 0 ]</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$argv</span>[1]&quot;</span> -eq <span class="string">&quot;<span class="variable">$argv</span>[2]&quot;</span> ]</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$argv</span>[1] <span class="string">&quot;==&quot;</span> <span class="variable">$argv</span>[2]</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$argv</span>[1] <span class="string">&quot;!=&quot;</span> <span class="variable">$argv</span>[2]</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入</span></span><br><span class="line">test_if 2 3</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">2 != 3</span><br></pre></td></tr></table></div></figure>        <h5 id="b-switch-语句"   >          <a href="#b-switch-语句" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#b-switch-语句"></a> b. switch 语句</h5>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test_switch</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> <span class="variable">$argv</span></span><br><span class="line">        switch <span class="variable">$string</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;switch&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;this is switch&quot;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;if&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;this is if&quot;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;while&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;this is while&quot;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;none&quot;</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入</span></span><br><span class="line">test_switch <span class="string">&quot;if&quot;</span> <span class="string">&quot;while&quot;</span> <span class="string">&quot;switch&quot;</span> <span class="string">&quot;dsads&quot;</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">this is <span class="keyword">if</span></span><br><span class="line">this is <span class="keyword">while</span></span><br><span class="line">this is switch</span><br><span class="line">none</span><br></pre></td></tr></table></div></figure>        <h5 id="c-while-语句"   >          <a href="#c-while-语句" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#c-while-语句"></a> c. while 语句</h5>      <figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test_while</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;fish shell&quot;</span></span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></div></figure><hr /><!-- ==太晚了睡觉了，有时间再写== -->        <h3 id="四-一些问题"   >          <a href="#四-一些问题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-一些问题"></a> 四、一些问题</h3>              <h4 id="1兼容-bash-脚本"   >          <a href="#1兼容-bash-脚本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1兼容-bash-脚本"></a> 1.兼容 bash 脚本</h4>      <p>正常写命令行脚本，例如<code>test.sh</code>，赋予其运行权限后，用以下指令运行</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c ./test.sh</span><br></pre></td></tr></table></div></figure><p>如果是经常需要使用的脚本，可以将以下内容写入<code>config.fish</code></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> <span class="built_in">test</span> <span class="string">&quot;bash -c ./test.sh&quot;</span> <span class="comment">#应该修改为全局路径</span></span><br></pre></td></tr></table></div></figure><p><code>test</code>即可运行该脚本</p>        <h4 id="2安装-anaconda"   >          <a href="#2安装-anaconda" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2安装-anaconda"></a> 2.安装 anaconda</h4>              <h5 id="a-安装脚本"   >          <a href="#a-安装脚本" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#a-安装脚本"></a> a. 安装脚本</h5>      <p>      <a href="https://mirrors.ustc.edu.cn/anaconda/archive/">https://mirrors.ustc.edu.cn/anaconda/archive/</a><br />      <s>没错，这个是科大的镜像站，指向的却是北外的源，这何尝不是一种 ntr</s></p>        <h5 id="b-具体安装过程"   >          <a href="#b-具体安装过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#b-具体安装过程"></a> b. 具体安装过程</h5>      <p>      直接执行该脚本(chmod 赋予权限)，然后会让你看一些条例啊，确定安装位置啥的，就 yes/no 选择一下，注意最后面推荐你写入环境变量，选择 no，以及是否安装 vscode，选择 no</p>        <h5 id="c-兼容性调整"   >          <a href="#c-兼容性调整" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#c-兼容性调整"></a> c. 兼容性调整</h5>      <p>      首先根据这个<a href="https://anaconda.org/mdraw/fish-shell">anaconda/fish-shell</a>，在 bash 内运行以下命令</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c mdraw fish-shell <span class="comment">#可能需要先添加环境变量（见下方）</span></span><br></pre></td></tr></table></div></figure><p>      然后打开 config.fish 配置文件，加入两行</p><figure class="highlight sh"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x PATH /home/your_name/anaconda3/bin <span class="variable">$PATH</span>       <span class="comment">#根据安装路径调整</span></span><br><span class="line"><span class="built_in">source</span> /home/your_name/anaconda3/etc/fish/conf.d/conda.fish</span><br></pre></td></tr></table></div></figure><p>      重启一下终端，大功告成</p><hr />    <div class="note-plugin info no-icon">            <p><s><strong>二逼青年用 bash，普通青年用 zsh，文艺青年用 fish</strong></s></p>    </div>  ]]></content>
    
    
    <summary type="html">&lt;p&gt;阴差阳错的，就用上了 fish，然后就不想换别的了，但是 fish 不兼容很多的 bash 脚本，与网上主流教程有一些区别，在这里记录我使用 fish 踩的坑&lt;/p&gt;
&lt;!-- ![fish.png](https://s2.loli.net/2022/01/25/y59mJL4gXH3EhkC.png) --&gt;

        &lt;h3 id=&quot;一-fish-shell-简介&quot;   &gt;
          &lt;a href=&quot;#一-fish-shell-简介&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-fish-shell-简介&quot;&gt;&lt;/a&gt; 一、fish shell 简介&lt;/h3&gt;
      
&lt;ul&gt;
&lt;li&gt;全名: &lt;a href=&quot;https://fishshell.com/&quot;&gt;the friendly interactive shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ubuntu 下安装(其它同理)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install fish&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="shell" scheme="https://voyage-li.github.io/categories/shell/"/>
    
    
    <category term="fish" scheme="https://voyage-li.github.io/tags/fish/"/>
    
    <category term="anaconda" scheme="https://voyage-li.github.io/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra实现导航软件</title>
    <link href="https://voyage-li.github.io/2022/01/03/navigation/"/>
    <id>https://voyage-li.github.io/2022/01/03/navigation/</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-01-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>数据结构 大作业二</strong></p></blockquote>        <h3 id="一-实验要求"   >          <a href="#一-实验要求" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-实验要求"></a> 一、实验要求</h3>      <p>    要求在所给的数据集上建立图结构（邻接矩阵或者邻接表），并在建立的图结构上自行实现Dijkstra算 法求解任意两点之间的最短路径。</p><ul><li>输入输出要求：<br />Input : src(源点)   Dst(目标点)<br />Output :<br />    (1) 最短路径的长度： distance<br />    (2) Src到Dsr的一条最短路径，例如：Src-&gt;p1-&gt;p2-&gt;p3-&gt;…-&gt;Dst(逆序输出也对)</li></ul>        <h3 id="二-实验目的"   >          <a href="#二-实验目的" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-实验目的"></a> 二、实验目的，</h3>      <p>    熟悉并掌握图的建立算法和Dijkstra求图上最短路径算法，了解Dijkstra算法的改进方法，掌握时间复杂度的分析方法并且去分析对比验证不同时间复杂度的Dijkstra算法的时间开销，了解稀疏的图结构的压缩存储方法。</p><span id="more"></span>        <h3 id="三-程序能实现的功能"   >          <a href="#三-程序能实现的功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-程序能实现的功能"></a> 三、程序能实现的功能</h3>      <ul><li>对数据文件进行二进制处理，同时少量压缩二进制文件</li><li>根据数据文件建立图结构(邻接表)</li><li>使用朴素法，二叉堆，配对堆，fibonacii堆搜索最短路径，对于大数据测试样例，搜索时间能够sub10</li></ul>        <h3 id="四-设计思路"   >          <a href="#四-设计思路" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-设计思路"></a> 四、设计思路</h3>      <ul><li>预处理<ul><li>将原数据文件转换为二进制形式</li><li>建立图的邻接表，将图按顺序输出，同一个出发点的边只记录以此源点，用度数来标记下一个源点</li></ul></li><li>dijkstra<ul><li>建立<code>visited</code>与<code>distance</code>数组</li><li>初始<code>visited</code>数组置0，<code>distance</code>数组置最大(由于<code>memset()</code>的限制，稍小于<code>INT_MAX</code>)</li><li>将源点距离设为0，访问设为1，遍历所有与源点相连的边，记录距离进入distance数组</li><li>从distance数组中找出distance最短的点，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>，遍历所有与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>相连的边，相连的点记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">v_1,v_2,...,v_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo stretchy="false">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mn>0</mn><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo>&gt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mrow><mi>u</mi><mo>−</mo><mo>&gt;</mo><mi>v</mi></mrow></msub></mrow><annotation encoding="application/x-tex">visited[v_i]==0\&amp; distance[v_i]&gt;distance[u]+weight_{u-&gt;v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mord mtight">−</span><span class="mrel mtight">&gt;</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，更新<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">distance[v_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>的值</li><li>重复上述操作，知道<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo stretchy="false">[</mo><mi>D</mi><mi>s</mi><mi>t</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">visited[Dst]==1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>或者整个图已搜索完毕，仍然没有找到路径</li><li>逆序输出最短路径</li></ul></li></ul>        <h3 id="五-项目结构"   >          <a href="#五-项目结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#五-项目结构"></a> 五、项目结构</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">─ navigation</span><br><span class="line">  ├── binary</span><br><span class="line">  │   └── pre.cpp</span><br><span class="line">  ├── CMakeLists.txt</span><br><span class="line">  ├── include</span><br><span class="line">  │   ├── dijkstra.h</span><br><span class="line">  │   ├── fibheap.h</span><br><span class="line">  │   ├── graph.h</span><br><span class="line">  │   ├── Heap.h</span><br><span class="line">  │   └── pair_heap.h</span><br><span class="line">  └── src</span><br><span class="line">      ├── dijkstra.cpp</span><br><span class="line">      ├── fibheap.cpp</span><br><span class="line">      ├── graph.cpp</span><br><span class="line">      ├── Heap.cpp</span><br><span class="line">      ├── main.cpp</span><br><span class="line">      └── pair_heap.cpp</span><br></pre></td></tr></table></div></figure>        <h3 id="六-关键内容实现"   >          <a href="#六-关键内容实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六-关键内容实现"></a> 六、关键内容实现</h3>              <h4 id="1-dijkstra堆优化"   >          <a href="#1-dijkstra堆优化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-dijkstra堆优化"></a> 1. dijkstra(堆优化)</h4>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *visited = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000000</span>];</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">100000000</span>);</span><br><span class="line"><span class="keyword">int</span> *dis = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000000</span>];</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">127</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">100000000</span>);</span><br><span class="line"><span class="keyword">int</span> *pre = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100000000</span>];</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">100000000</span>);</span><br><span class="line">Heap&lt;<span class="class"><span class="keyword">struct</span> <span class="title">node</span>&gt;</span> q;</span><br><span class="line">dis[x] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">node</span>(x, dis[x]));</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">now</span> =</span> q.<span class="built_in">top</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (visited[now.begin] == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    visited[now.begin] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (now.begin == y)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">p</span> =</span> G.data[now.begin]-&gt;firstarc;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[p-&gt;adjvex] != <span class="number">1</span> &amp;&amp; dis[p-&gt;adjvex] &gt; dis[now.begin] + p-&gt;weight)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[p-&gt;adjvex] = dis[now.begin] + p-&gt;weight;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">node</span>(p-&gt;adjvex, dis[p-&gt;adjvex]));</span><br><span class="line">            pre[p-&gt;adjvex] = now.begin;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (visited[y] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;不能到达!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">delete</span>[] visited;</span><br><span class="line">    <span class="keyword">delete</span>[] dis;</span><br><span class="line">    <span class="keyword">delete</span>[] pre;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> road = y;</span><br><span class="line"><span class="keyword">while</span> (road != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0;30;47m%d\033[0m &quot;</span>, road);</span><br><span class="line">    road = pre[road];</span><br><span class="line">    <span class="keyword">if</span> (road != <span class="number">-1</span>)</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;&lt;- &quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\nOutput:\n&quot;</span></span><br><span class="line">          &lt;&lt; dis[y] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] visited;</span><br><span class="line"><span class="keyword">delete</span>[] dis;</span><br><span class="line"><span class="keyword">delete</span>[] pre;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-二叉堆"   >          <a href="#2-二叉堆" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-二叉堆"></a> 2. 二叉堆</h4>      <ul><li><p>存储结构</p>  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;T&gt; data;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Heap</span>();</span><br><span class="line">    ~<span class="built_in">Heap</span>();</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span></span>;      <span class="comment">//上浮</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span></span>;      <span class="comment">//下沉</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T e)</span></span>;        <span class="comment">//入堆</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;            <span class="comment">//出堆</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T <span class="title">top</span><span class="params">()</span></span>;               <span class="comment">//返回堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;          <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;            <span class="comment">//返回大小</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(T &amp;a, T &amp;b)</span></span>; <span class="comment">//交换元素</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure></li><li><p>上浮</p>  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; data[k] &gt; data[k / <span class="number">2</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">swap</span>(data[k], data[k / <span class="number">2</span>]);</span><br><span class="line">    k /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>下沉</p>  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (k * <span class="number">2</span> &lt;= length)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; length &amp;&amp; (data[j] &lt; data[j + <span class="number">1</span>])) <span class="comment">//找到左右子树中更小的</span></span><br><span class="line">        j++;</span><br><span class="line">    <span class="keyword">if</span> (data[k] &gt; data[j])</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">swap</span>(data[k], data[j]);</span><br><span class="line">    k = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>        <h4 id="3-配对堆"   >          <a href="#3-配对堆" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-配对堆"></a> 3. 配对堆</h4>      <ul><li><p>存储结构</p>  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pair_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T val;</span><br><span class="line">    <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">int</span> right;</span><br><span class="line">    <span class="built_in">pair_node</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pair_node</span>(T e)</span><br><span class="line">    &#123;</span><br><span class="line">        val = e;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pair_heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;pair_node&lt;T&gt;&gt; data;</span><br><span class="line">    <span class="keyword">int</span> length; <span class="comment">//已经到达的vector地址</span></span><br><span class="line">    <span class="keyword">int</span> _size;  <span class="comment">//实际存储的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merges</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pop_</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">pair_heap</span>();</span><br><span class="line">    ~<span class="built_in">pair_heap</span>();</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _pop();</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure></li><li><p>merge</p>  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y)</span><br><span class="line">        root = x + y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x == y)</span><br><span class="line">        root = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[x].val &lt; data[y].val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = x;</span><br><span class="line">            x = y;</span><br><span class="line">            y = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        data[y].right = data[x].left;</span><br><span class="line">        data[x].left = y;</span><br><span class="line">        data[x].right = <span class="number">0</span>;</span><br><span class="line">        root = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li><p>pop即反复merge根节点的孩子节点</p></li></ul>        <h4 id="4-fibonacii堆"   >          <a href="#4-fibonacii堆" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-fibonacii堆"></a> 4. Fibonacii堆</h4>      <ul><li>存储结构  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span>&lt;</span>T&gt; *parent;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span>&lt;</span>T&gt; *child;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span>&lt;</span>T&gt; *left;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span>&lt;</span>T&gt; *right;</span><br><span class="line">    T key;</span><br><span class="line">    <span class="keyword">int</span> degree;</span><br><span class="line">    <span class="built_in">fib_node</span>() : <span class="built_in">parent</span>(<span class="literal">nullptr</span>), <span class="built_in">child</span>(<span class="literal">nullptr</span>), <span class="built_in">left</span>(<span class="keyword">this</span>), <span class="built_in">right</span>(<span class="keyword">this</span>), <span class="built_in">degree</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibHeap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> keyNum;</span><br><span class="line">    <span class="keyword">int</span> maxDegree;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span>&lt;</span>T&gt; *min;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fib_node</span>&lt;</span>T&gt; **cons;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(struct fib_node&lt;T&gt; *node)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(struct fib_node&lt;T&gt; *node, struct fib_node&lt;T&gt; *root)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consolidate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">struct fib_node&lt;T&gt; *<span class="title">extractMin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeCons</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(struct fib_node&lt;T&gt; *node, struct fib_node&lt;T&gt; *root)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">theEnd</span><span class="params">(struct fib_node&lt;T&gt; *node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FibHeap</span>();</span><br><span class="line">    ~<span class="built_in">FibHeap</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure></li><li>具体操作见源码</li></ul>        <h3 id="七-测试程序的正确性及性能"   >          <a href="#七-测试程序的正确性及性能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#七-测试程序的正确性及性能"></a> 七、测试程序的正确性及性能</h3>      <blockquote><p>引入pbds库中各种最小堆进行比较</p></blockquote><ul><li><p>对于小数据测试样例</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/dS3fkzgEXIT8sci.png"  alt="test_small.png" />      </p><p>可以看到，对于小数据测试样例，除了朴素法时间过长以外，手写的堆以及pbds库中的堆都可以在1s之内完成搜索，由于电脑性能不稳定，时间的差距可以忽略</p></li><li><p>对于两组大数据测试样例</p><ul><li>3141592-&gt;2718281</li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/lcvQpPWKeRTuai5.png"  alt="test_big_1.png" />      </p><ul><li>1000000-&gt;2000000</li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/Cwic3ODkSP681Fr.png"  alt="test_big_2.png" />      </p><ul><li><p>对于大数据测试，朴素法在一个小时内都无法搜索出答案</p></li><li><p>所有堆优化的算法都可以在25s之内完成搜索</p></li><li><p>手动实现的二叉堆拥有最好的性能，较之系统的优先队列，也有更好的表现</p></li><li><p>递归实现pop的配对堆与系统配对堆性能相仿，队列实现pop则稍有差距(如果在编译时开启O2优化，队列的性能会强于递归，但是O2优化不够稳定)</p></li><li><p>Fibonacci堆较之pbds库有着不小的差距</p></li></ul></li><li><p>一些思考</p><p>配对堆和Fibonacci堆在理论上的时间复杂度都应该优于二叉堆，但是手写的二叉堆反而性能最佳，pbds库配对堆和Fibonacci堆较二叉堆也没有极其突出的表现，我认为原因可能有：</p><ul><li>测试数据点特殊，具有偶然性</li><li>在入堆的操作上，二叉堆是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>的，配对堆和Fibonacci堆是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的，此时二叉堆的性能较差，但由于数据特殊性，在每次入堆时，所需要经历的上浮操作较少</li><li>在出堆的操作上，三种堆结构均是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>的，但是配对堆和Fiboncci堆是均摊复杂度，单次操作极限情况下:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msub><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mn>8</mn></mfrac><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\lim_{n\to+\infty}\frac{n}{2}+\frac{n}{4}+\frac{n}{8}+...=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，由于出堆几乎不是连续的，虽然上次出堆使根节点的孩子节点变成了原来的一半，由于不能立刻弹出，经历了多次入堆操作后，出堆的复杂度仍然是较高的，浪费了过多的时间</li></ul></li></ul>        <h3 id="八-编译过程"   >          <a href="#八-编译过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#八-编译过程"></a> 八、编译过程</h3>      <ul><li><p>编译环境</p><ul><li>Ubuntu-20.04 ( wsl2 )</li><li>gcc 9.3.0</li><li>cmake version 3.16.3</li></ul></li><li><p>CMakeLists.txt (注意修改Debug模式和Release模式)</p>  <figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(navigation)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES</span><br><span class="line">    src/main.cpp</span><br><span class="line">    src/dijkstra.cpp</span><br><span class="line">    src/graph.cpp</span><br><span class="line">    src/Heap.cpp</span><br><span class="line">    src/pair_heap.cpp</span><br><span class="line">    src/fibheap.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(navigation <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span>)</span><br><span class="line"><span class="comment"># SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(navigation</span><br><span class="line">PRIVATE</span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br></pre></td></tr></table></div></figure></li><li><p>编译操作(Release版本为例，首先进入项目目录)</p>  <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir Release</span><br><span class="line"><span class="built_in">cd</span> Release</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">ulimit</span> -s unlimited <span class="comment"># linux下打开内存限制</span></span><br><span class="line">./navigation</span><br><span class="line"><span class="comment"># 运行程序</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="九-源码"   >          <a href="#九-源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#九-源码"></a> 九、源码</h3>      <p>    <a href="https://github.com/voyage-li/navigation">戳这里</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据结构 大作业二&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

        &lt;h3 id=&quot;一-实验要求&quot;   &gt;
          &lt;a href=&quot;#一-实验要求&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-实验要求&quot;&gt;&lt;/a&gt; 一、实验要求&lt;/h3&gt;
      
&lt;p&gt;    要求在所给的数据集上建立图结构（邻接矩阵或者邻接表），并在建立的图结构上自行实现Dijkstra算 法求解任	意两点之间的最短路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入输出要求：&lt;br /&gt;
Input : src(源点)   Dst(目标点)&lt;br /&gt;
Output :&lt;br /&gt;
    (1) 最短路径的长度： distance&lt;br /&gt;
    (2) Src到Dsr的一条最短路径，例如：Src-&amp;gt;p1-&amp;gt;p2-&amp;gt;p3-&amp;gt;…-&amp;gt;Dst(逆序输出也对)&lt;/li&gt;
&lt;/ul&gt;

        &lt;h3 id=&quot;二-实验目的&quot;   &gt;
          &lt;a href=&quot;#二-实验目的&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二-实验目的&quot;&gt;&lt;/a&gt; 二、实验目的，&lt;/h3&gt;
      
&lt;p&gt;    熟悉并掌握图的建立算法和Dijkstra求图上最短路径算法，了解Dijkstra算法的改进方法，掌握时间复杂度的分析方法并且去分析对比验证不同时间复杂度的Dijkstra算法的时间开销，了解稀疏的图结构的压缩存储方法。&lt;/p&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="C++" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/C/"/>
    
    <category term="数据结构" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="dijkstra" scheme="https://voyage-li.github.io/tags/dijkstra/"/>
    
    <category term="堆" scheme="https://voyage-li.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>Huffman压缩</title>
    <link href="https://voyage-li.github.io/2022/01/02/huffman/"/>
    <id>https://voyage-li.github.io/2022/01/02/huffman/</id>
    <published>2022-01-01T16:00:00.000Z</published>
    <updated>2022-01-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>数据结构 大作业一</strong></p></blockquote>        <h3 id="一-问题描述"   >          <a href="#一-问题描述" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-问题描述"></a> 一、问题描述</h3>      <p>在合适的情况下，利⽤ Huffman 编码对⽂件进⾏压缩可以减少其占⽤空间，同时在需要使⽤到⽂件的 时候也可以根据压缩⽂件中所提供的信息来将其还原为原⽂件。本次实验中，我们将实现⼀个基于 Huffman 编码的⽂件压缩/解压缩⼯具。</p>        <h3 id="二-基本要求"   >          <a href="#二-基本要求" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-基本要求"></a> 二、基本要求</h3>      <p>基于 Huffman 编码实现⼀个压缩器和解压缩器（其中 Huffman 编码以字节作为统计和编码的基本符号 单元），使其可以对任意的⽂件进⾏压缩和解压缩操作。针对编译⽣成的程序，要求压缩和解压缩部分 可以分别独⽴运⾏。具体要求为：</p><ul><li>每次运⾏程序时，⽤⼾可以指定<strong>只压缩/只解压</strong>缩指定路径的⽂件。实现的时候不限制与⽤⼾的交 互⽅式，可供参考的⽅式包括但不限于<ul><li>根据命令⾏参数指定功能（压缩/解压缩）和输⼊/输出⽂件路径</li><li>GUI 界⾯</li><li>运⾏程序后由⽤⼾交互输⼊指定功能和路径</li></ul></li></ul><span id="more"></span><ul><li><p><strong>【CAUTION!】不被允许的交互⽅式</strong>： 通过修改源代码指定功能和⽂件路径</p></li><li><p>压缩时不需要指定解压⽂件的⽬标路径，解压缩时不需要指定压缩前原⽂件的路径，压缩后的⽂件 可以换到另⼀个位置再做解压缩</p></li></ul>        <h3 id="三-程序能实现的功能"   >          <a href="#三-程序能实现的功能" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-程序能实现的功能"></a> 三、程序能实现的功能</h3>      <ol><li>压缩指定路径的任意格式的文件</li><li>解压指定路径的文件(无损)</li><li>可以选择压缩的基本单元(0.5Byte ~ 4Byte)</li><li>可以选择使用多元 Huffman 数进行压缩 (2~16)</li><li>3，4 项同时使用</li></ol>        <h3 id="四-实验思路"   >          <a href="#四-实验思路" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-实验思路"></a> 四、实验思路</h3>      <ol><li>压缩<ul><li>第一遍扫描文件，根据用户选择的压缩基本单元，统计每一种基本单元出现的频次</li><li>以出现的频次作为权重，根据用户选择构建 Huffman 树，若用户选择多元压缩，则首先补全节点数，其次使用优先队列，每次弹出最小的元素，构造 Huffman 树</li><li>根据构造出的 Huffman 树，求得 Huffman 编码 (压缩单元较小时，使用指针 new 内存的形式加速，压缩单元较大时，使用 map 来控制内存的使用)</li><li>首先输出被压缩文件的类型，压缩时使用的基本单元大小，Huffman 树种类，再输出每一个基本单元出现的频次</li><li>再次扫描文件，每当获取一个基本单元大小的字节，二进制输出它的 Huffman 编码 (每八位以一个字符的形式输出)</li></ul></li><li>解压<ul><li>首先获得压缩文件头部的相关信息，以及各个基本单元出现的频次</li><li>用和压缩时完全相同的方式构造出 Huffman 树，获得 Huffman 编码</li><li>扫描剩下的文件内容，根据二进制编码，转化为原来的基本单元输出</li></ul></li></ol>        <h3 id="五-项目结构"   >          <a href="#五-项目结构" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#五-项目结构"></a> 五、项目结构</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">─ huffman-compress</span><br><span class="line">  ├── CMakeLists.txt</span><br><span class="line">  ├── include</span><br><span class="line">  │   ├── big.h</span><br><span class="line">  │   ├── huffman.h</span><br><span class="line">  │   ├── small.h</span><br><span class="line">  │   └── tempwindow.h</span><br><span class="line">  └── src</span><br><span class="line">      ├── big.cpp</span><br><span class="line">      ├── huffman.cpp</span><br><span class="line">      ├── main.cpp</span><br><span class="line">      ├── small.cpp</span><br><span class="line">      └── tempwindow.cpp</span><br></pre></td></tr></table></div></figure>        <h3 id="六-关键内容实现"   >          <a href="#六-关键内容实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六-关键内容实现"></a> 六、关键内容实现</h3>              <h4 id="1-huffman树的建立"   >          <a href="#1-huffman树的建立" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-huffman树的建立"></a> 1. huffman树的建立</h4>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化 huffman树</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fre = map.<span class="built_in">size</span>();</span><br><span class="line">HT = <span class="keyword">new</span> HTNode[<span class="number">2</span> * fre];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * fre; i++)</span><br><span class="line">&#123;</span><br><span class="line">    HT[i].num = i;</span><br><span class="line">    HT[i].key = <span class="number">0</span>;</span><br><span class="line">    HT[i].weight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tree_n; j++)</span><br><span class="line">        HT[i].child[j] = <span class="number">0</span>;</span><br><span class="line">    HT[i].parent = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">HT[<span class="number">0</span>].weight = INT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter : map)</span><br><span class="line">&#123;</span><br><span class="line">    HT[index].key = iter.first;</span><br><span class="line">    HT[index].weight = iter.second;</span><br><span class="line">    index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用优先队列构造huffman树</span></span><br><span class="line">std::priority_queue&lt;HTNode&gt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= fre; i++)</span><br><span class="line">    ans.<span class="built_in">push</span>(HT[i]);</span><br><span class="line"><span class="keyword">if</span> (tree_n != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> blank;</span><br><span class="line">    <span class="keyword">if</span> (fre % (tree_n - <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        blank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        blank = tree_n - fre % (tree_n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (blank != tree_n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        HuffmanTree Tree_blank = <span class="keyword">new</span> HTNode;</span><br><span class="line">        Tree_blank-&gt;key = <span class="number">0</span>;</span><br><span class="line">        Tree_blank-&gt;parent = <span class="number">0</span>;</span><br><span class="line">        Tree_blank-&gt;weight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tree_n; j++)</span><br><span class="line">            Tree_blank-&gt;child[j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blank; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Tree_blank-&gt;num = fre + i + <span class="number">1</span>;</span><br><span class="line">            ans.<span class="built_in">push</span>(*Tree_blank);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//要从加了0之后开始计算 即修正fre</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> now = fre + <span class="number">1</span>; now &lt; <span class="number">2</span> * fre; now++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> now_weight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree_n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        HTNode temp_Node = ans.<span class="built_in">top</span>();</span><br><span class="line">        HT[temp_Node.num].parent = now;</span><br><span class="line">        HT[now].child[i] = temp_Node.num;</span><br><span class="line">        now_weight += temp_Node.weight;</span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    HT[now].weight = now_weight;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ans.<span class="built_in">push</span>(HT[now]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2-获取huffman编码"   >          <a href="#2-获取huffman编码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-获取huffman编码"></a> 2. 获取huffman编码</h4>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *cd = <span class="keyword">new</span> <span class="keyword">char</span>[fre];</span><br><span class="line">cd[fre - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= fre; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> start = fre - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> j, p;</span><br><span class="line">    <span class="keyword">for</span> (j = i, p = HT[i].parent; p != <span class="number">0</span>; j = p, p = HT[p].parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (HT[p].child[index] != j)</span><br><span class="line">            index++;</span><br><span class="line">        <span class="keyword">int</span> wei = <span class="built_in">judge</span>(tree_n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= wei - <span class="number">1</span>; i++)</span><br><span class="line">            cd[--start] = ((index &gt;&gt; i) &amp; <span class="number">1</span>) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HC[HT[i].key] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((fre - start) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(HC[HT[i].key], &amp;cd[start]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3-压缩"   >          <a href="#3-压缩" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-压缩"></a> 3. 压缩</h4>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (infile.<span class="built_in">get</span>(c))</span><br><span class="line">&#123;</span><br><span class="line">    now_byte++;</span><br><span class="line">    char_now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (char_now &lt; <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (char_now &lt; <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tt_key += (((<span class="keyword">int</span>)c &gt;&gt; (<span class="number">7</span> - char_now)) &amp; <span class="number">1</span>) &lt;&lt; (every - <span class="number">1</span> - now_bit);</span><br><span class="line">            char_now++;</span><br><span class="line">            now_bit++;</span><br><span class="line">            <span class="keyword">if</span> (now_bit == every)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (now_bit == every)</span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (HC[tt_key][i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tt += (HC[tt_key][i] - <span class="string">&#x27;0&#x27;</span>) &lt;&lt; (<span class="number">7</span> - num);</span><br><span class="line">                i++;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">8</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    outfile.<span class="built_in">put</span>((<span class="keyword">char</span>)tt);</span><br><span class="line">                    num = <span class="number">0</span>;</span><br><span class="line">                    tt = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            now_bit = <span class="number">0</span>;</span><br><span class="line">            tt_key = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出最后一个可能没有到达一个单位的字符</span></span><br><span class="line"><span class="keyword">if</span> (now_bit != every &amp;&amp; now_bit != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (HC[tt_key][i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tt += (HC[tt_key][i] - <span class="string">&#x27;0&#x27;</span>) &lt;&lt; (<span class="number">7</span> - num);</span><br><span class="line">        i++;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            outfile.<span class="built_in">put</span>((<span class="keyword">char</span>)tt);</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            tt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出可能没有到达8bit的最后一个字符</span></span><br><span class="line"><span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">    outfile.<span class="built_in">put</span>((<span class="keyword">char</span>)tt);</span><br></pre></td></tr></table></div></figure>        <h4 id="4-解压"   >          <a href="#4-解压" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-解压"></a> 4. 解压</h4>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    infile.<span class="built_in">get</span>(c);</span><br><span class="line">    <span class="keyword">int</span> tt = c;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        ans[index++] = ((tt &gt;&gt; i) &amp; <span class="number">1</span>) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        switch_child += (ans[index] - <span class="string">&#x27;0&#x27;</span>) &lt;&lt; (wei - <span class="number">1</span> - wei_now);</span><br><span class="line">        wei_now++;</span><br><span class="line">        <span class="keyword">if</span> (wei == wei_now)</span><br><span class="line">        &#123;</span><br><span class="line">            wei_now = <span class="number">0</span>;</span><br><span class="line">            now = HT[now].child[switch_child];</span><br><span class="line">            switch_child = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (HT[now].child[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取对应权值对应的 bit位</span></span><br><span class="line">            <span class="keyword">int</span> int_to_char = HT[now].key;</span><br><span class="line">            <span class="keyword">char</span> ans_[every + <span class="number">1</span>];</span><br><span class="line">            ans_[every] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; every; j++)</span><br><span class="line">                ans_[j] = ((int_to_char &gt;&gt; (every - <span class="number">1</span> - j)) &amp; <span class="number">1</span>) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (ans_[j] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                now_bit++;</span><br><span class="line">                out_tmp += (ans_[j] - <span class="string">&#x27;0&#x27;</span>) &lt;&lt; (<span class="number">8</span> - now_bit);</span><br><span class="line">                <span class="keyword">if</span> (now_bit == <span class="number">8</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    char_size--;</span><br><span class="line">                    outfile.<span class="built_in">put</span>(out_tmp);</span><br><span class="line">                    now_byte++;</span><br><span class="line">                    tmp_struct = &#123;now_byte, size&#125;;</span><br><span class="line">                    out_tmp = <span class="number">0</span>;</span><br><span class="line">                    now_bit = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (char_size == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            now = root_loc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">8</span> || char_size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (char_size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="七-编译过程"   >          <a href="#七-编译过程" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#七-编译过程"></a> 七、编译过程</h3>      <ul><li><p>编译环境</p><ul><li>Ubuntu-20.04 ( wsl2 )</li><li>gcc 9.3.0</li><li>cmake version 3.16.3</li></ul></li><li><p>CMakeLists.txt (注意修改 Debug 模式和 Release 模式)</p><figure class="highlight cmake"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(yasuo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> (CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -pthread&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(SOURCES</span><br><span class="line">    src/main.cpp</span><br><span class="line">    src/big.cpp</span><br><span class="line">    src/small.cpp</span><br><span class="line">    src/tempwindow.cpp</span><br><span class="line">    src/huffman.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_definitions</span>(-w)<span class="comment"># system忽略了返回值，消除编译警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(yasuo <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(yasuo</span><br><span class="line">PRIVATE</span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br></pre></td></tr></table></div></figure></li><li><p>编译操作(Release 版本为例，首先进入项目目录)</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir Release</span><br><span class="line"><span class="built_in">cd</span> Release</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./yasuo</span><br><span class="line"><span class="comment"># 运行程序</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="八-运行效果"   >          <a href="#八-运行效果" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#八-运行效果"></a> 八、运行效果</h3>      <ul><li><p>使用 1.5Byte 为基本单元，三叉 Huffman 树压缩 png 文件，源文件 258kb，压缩后 182kb，解压后 258kb，效果较为明显，同时文件解压后无任何变化</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/Xi1LHKtRrx5qUe8.png"  alt="eg.png" />      </p></li><li><p>性能测试</p><p>使用该程序压缩大小 1.3G 的 txt 文档</p><ul><li><p>压缩用时：130.917s</p></li><li><p>解压用时：113.172s</p></li><li><p>压缩效率：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>46</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">46\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord">4</span><span class="mord">6</span><span class="mord">%</span></span></span></span></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/Ei7wSqeNHyOgxAD.png"  alt="test_.png" />      </p></li></ul></li></ul>        <h3 id="九-关于-huffman-压缩的探索"   >          <a href="#九-关于-huffman-压缩的探索" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#九-关于-huffman-压缩的探索"></a> 九、关于 Huffman 压缩的探索</h3>      <ul><li><p>压缩一包含中英文及数字的 txt 文档，压缩效果如下(压缩率=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mtext>压缩文件大小</mtext><mtext>原始文件</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{\text{压缩文件大小}}{\text{原始文件}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原始文件</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">压缩文件大小</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/tBP1oyzaV7hlkNe.png"  alt="table.png" />      </p></li><li><p>利用上述数据作图 (mathematica 作图有一定偏差)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2022/01/14/Q3F5Vp9dJu8ThOM.png"  alt="pc.png" />      </p></li><li><p>根据上述实验数据可以看出:</p><ul><li>压缩基本单元为 0.5Byte 时，基本没有压缩效果</li><li>随着压缩基本单元的增大，压缩效果总体上呈现上升趋势</li><li>在压缩的基本单元从 3.0Byte 变为 3.5Byte 时，压缩效果均有小幅下降</li><li>当选用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>叉 Huffman 树时，压缩效果明显更佳，而当选用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>叉 Huffman 树时，压缩效果较差 (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>叉 Huffman 树每一个节点都刚好可以利用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> bit 的 Huffman 编码)<br /><strong>因此，在压缩 txt 文本文件时，选用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>叉 Huffman 树，在综合时间的情况下选择更大的压缩基本单元，能够提高压缩效率</strong><blockquote><p>同时值得指出的是，对于图片，视频等文件类型，基本单元极有可能发生出现次数相近的情况，此时综合时间等考虑，可以尽量选择 1Byte 为压缩的基本单元</p></blockquote></li></ul></li></ul>        <h3 id="十-源码"   >          <a href="#十-源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#十-源码"></a> 十、源码</h3>      <p>    <a href="https://github.com/voyage-li/huffman-compress">戳这里</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据结构 大作业一&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

        &lt;h3 id=&quot;一-问题描述&quot;   &gt;
          &lt;a href=&quot;#一-问题描述&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-问题描述&quot;&gt;&lt;/a&gt; 一、问题描述&lt;/h3&gt;
      
&lt;p&gt;在合适的情况下，利⽤ Huffman 编码对⽂件进⾏压缩可以减少其占⽤空间，同时在需要使⽤到⽂件的 时候也可以根据压缩⽂件中所提供的信息来将其还原为原⽂件。本次实验中，我们将实现⼀个基于 Huffman 编码的⽂件压缩/解压缩⼯具。&lt;/p&gt;

        &lt;h3 id=&quot;二-基本要求&quot;   &gt;
          &lt;a href=&quot;#二-基本要求&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二-基本要求&quot;&gt;&lt;/a&gt; 二、基本要求&lt;/h3&gt;
      
&lt;p&gt;基于 Huffman 编码实现⼀个压缩器和解压缩器（其中 Huffman 编码以字节作为统计和编码的基本符号 单元），使其可以对任意的⽂件进⾏压缩和解压缩操作。针对编译⽣成的程序，要求压缩和解压缩部分 可以分别独⽴运⾏。具体要求为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次运⾏程序时，⽤⼾可以指定&lt;strong&gt;只压缩/只解压&lt;/strong&gt;缩指定路径的⽂件。实现的时候不限制与⽤⼾的交 互⽅式，可供参考的⽅式包括但不限于
&lt;ul&gt;
&lt;li&gt;根据命令⾏参数指定功能（压缩/解压缩）和输⼊/输出⽂件路径&lt;/li&gt;
&lt;li&gt;GUI 界⾯&lt;/li&gt;
&lt;li&gt;运⾏程序后由⽤⼾交互输⼊指定功能和路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="C++" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/C/"/>
    
    <category term="数据结构" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="huffman树" scheme="https://voyage-li.github.io/tags/huffman%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>建站经历</title>
    <link href="https://voyage-li.github.io/2021/12/26/experience/"/>
    <id>https://voyage-li.github.io/2021/12/26/experience/</id>
    <published>2021-12-25T16:00:00.000Z</published>
    <updated>2025-08-12T13:40:54.228Z</updated>
    
    <content type="html"><![CDATA[<p>本文将讲述我通过 hexo 以及 github page 建立本博客的过程</p>        <h3 id="一-本地环境"   >          <a href="#一-本地环境" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-本地环境"></a> 一、本地环境</h3>      <ul><li>Ubuntu 20.04(wsl2)</li><li>hexo: 5.4.0</li><li>nodejs: v13.14.0(使用过高版本会出现警告)</li><li>npm: 6.14.4</li><li>切换 node 版本:<br /><code>bash sudo n rm 16.13.1 # 删除指定版本node sudo n 13.14.0 # 安装指定版本node</code></li></ul><span id="more"></span>        <h3 id="二-初始化博客"   >          <a href="#二-初始化博客" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-初始化博客"></a> 二、初始化博客</h3>      <ul><li>建立博客文件夹<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></div></figure></li><li>输入以下指令之后可以在:<a href="http://localhost:4000/">localhost:4000/</a>看到初始化的博客<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">hexo s</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="三-选择合适的主题"   >          <a href="#三-选择合适的主题" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-选择合适的主题"></a> 三、选择合适的主题</h3>      <p>     从<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>中选择合适的主题，本博客使用主题: <a href="https://github.com/liuyib/hexo-theme-stun">stun</a></p><ul><li>克隆主题项目到本地仓库<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/liuyib/hexo-theme-stun.git themes/stun</span><br></pre></td></tr></table></div></figure></li><li>安装 pug 引擎依赖<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-pug</span><br></pre></td></tr></table></div></figure></li><li>将<strong>博客文件目录</strong>下的<code>_config.yml</code>中的 theme 内容改为 stun<figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">stun</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="四-基本内容的设置"   >          <a href="#四-基本内容的设置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-基本内容的设置"></a> 四、基本内容的设置</h3>              <h4 id="1-基本操作"   >          <a href="#1-基本操作" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-基本操作"></a> 1. 基本操作</h4>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo new page filename  <span class="comment"># 新建一个页面</span></span><br><span class="line">hexo new page tags      <span class="comment"># 新建一个指定layout的页面，以标签tags为例</span></span><br><span class="line">hexo new articlename    <span class="comment"># 新建一篇文章</span></span><br><span class="line">hexo clean              <span class="comment"># 清除缓存文件</span></span><br><span class="line">hexo s                  <span class="comment"># 本地渲染网站</span></span><br><span class="line">hexo d                  <span class="comment"># 生成博客文件(后文具体详解)</span></span><br></pre></td></tr></table></div></figure>        <h4 id="2-修改博客基本信息"   >          <a href="#2-修改博客基本信息" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-修改博客基本信息"></a> 2. 修改博客基本信息</h4>      <ul><li>修改<strong>博客文件目录</strong>下的<code>_config.yml</code>文件中的<code>title</code>,<code>subtitle</code>,<code>author</code>,<code>language</code>等</li><li>修改<strong>博客文件目录</strong>下的<code>_config.yml</code>文件中的 url 为博客部署的地址(具体部署方法在后文)</li></ul>        <h4 id="3-修改主题信息"   >          <a href="#3-修改主题信息" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-修改主题信息"></a> 3. 修改主题信息</h4>      <p>    <a href="https://theme-stun.github.io/docs/zh-CN/guide/primary.html">stun 主题配置官方文件</a></p>        <h5 id="1-修改-menu-内容"   >          <a href="#1-修改-menu-内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-修改-menu-内容"></a> (1) 修改 menu 内容</h5>      <p>    修改<strong>主题文件目录</strong>下的<code>_config.yml</code>文件 <code>||</code>左边为文件路径，右边为图标，具体不同图标选择见<a href="https://www.thinkcmf.com/font_awesome.html">Font Awesome</a></p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">about:</span> <span class="string">/about</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-user</span></span><br><span class="line"><span class="attr">calculate:</span> <span class="string">javascript:;</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-database</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">/message/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment</span></span><br><span class="line"><span class="attr">history:</span> <span class="string">/history/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-history</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">/friend/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">submenu:</span></span><br><span class="line">      <span class="attr">calculate:</span></span><br><span class="line">        <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">        <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-layer-group</span></span><br><span class="line">        <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="string">```</span></span><br><span class="line"></span><br><span class="line"><span class="string">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;自己添加的页面需要在主题文件夹下`/languages/zh-CN.yml`加入中文</span></span><br><span class="line"></span><br><span class="line"><span class="string">```yml</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">留言</span></span><br></pre></td></tr></table></div></figure>        <h5 id="2-修改网站-favicon"   >          <a href="#2-修改网站-favicon" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-修改网站-favicon"></a> (2) 修改网站 favicon</h5>      <p>    生成头像见网站 <a href="https://realfavicongenerator.net/">Favicon</a> 或者 <a href="https://www.websiteplanet.com/webtools/favicon-generator/">websiteplanet(更多的支持)</a></p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/icons/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/icons/favicon-32x32.png</span></span><br></pre></td></tr></table></div></figure>        <h5 id="3-修改-header-内容"   >          <a href="#3-修改-header-内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-修改-header-内容"></a> (3) 修改 header 内容</h5>      <p>    这里选择主页启用头部图，文章页面不显示头部图</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">header:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">show_on:</span></span><br><span class="line">    <span class="attr">post:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">height:</span> <span class="number">50</span><span class="string">%</span></span><br><span class="line">  <span class="attr">bg_image:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/images/icons/banner/saibo.jpg</span></span><br><span class="line">  <span class="attr">mask:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="attr">height:</span> <span class="string">50px</span></span><br><span class="line">    <span class="attr">bg_color:</span> <span class="string">&quot;#333&quot;</span></span><br><span class="line">  <span class="attr">scroll_down_icon:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fas</span> <span class="string">fa-angle-down</span></span><br><span class="line">    <span class="attr">animation:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h5 id="4-修改侧边栏内容"   >          <a href="#4-修改侧边栏内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-修改侧边栏内容"></a> (4) 修改侧边栏内容</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">  <span class="attr">offsetTop:</span> <span class="string">20px</span></span><br><span class="line">  <span class="attr">horizon_line:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">avatar:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/images/icons/zoe.svg</span> <span class="comment"># 头像</span></span><br><span class="line">    <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment"># 圆形</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">1</span> <span class="comment"># 透明度</span></span><br><span class="line">    <span class="attr">animation:</span> <span class="string">shake</span> <span class="comment"># (动画)</span></span><br><span class="line">  <span class="attr">motto:</span> <span class="string">&quot;每一天，每个季节都会过去， 然后就是新的开始&quot;</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">https://github.com/voyage-li/</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">twitter:</span> <span class="string">https://twitter.com/_voy4ge_</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-twitter</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">mailto:voyage@mail.ustc.edu.cn</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">qq:</span> <span class="string">tencent://message?uin=923959605</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-qq</span></span><br></pre></td></tr></table></div></figure>        <h5 id="5-修改网页底部内容"   >          <a href="#5-修改网页底部内容" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-修改网页底部内容"></a> (5) 修改网页底部内容</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">bg_image:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">url:</span></span><br><span class="line">  <span class="attr">mask:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2021</span></span><br><span class="line">    <span class="attr">end:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br><span class="line">    <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">  <span class="attr">custom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">text:</span></span><br></pre></td></tr></table></div></figure>        <h4 id="4-更多设置"   >          <a href="#4-更多设置" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-更多设置"></a> 4. 更多设置</h4>              <h5 id="1-启用-valine-评论"   >          <a href="#1-启用-valine-评论" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-启用-valine-评论"></a> (1) 启用 Valine 评论</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid.</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey.</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">留下一句评论再走吧（请使用markdown语法）</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="string">nick,mail</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h5 id="2-启用-katex-渲染-latex-代码"   >          <a href="#2-启用-katex-渲染-latex-代码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-启用-katex-渲染-latex-代码"></a> (2) 启用 katex 渲染 latex 代码</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">katex</span></span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果安装以下插件，请全部卸载</span></span><br><span class="line">npm un hexo-renderer-marked      --save</span><br><span class="line">npm un hexo-renderer-kramed      --save</span><br><span class="line">npm un hexo-renderer-pandoc      --save</span><br><span class="line">npm un hexo-renderer-unified     --save</span><br><span class="line">npm un hexo-renderer-markdown    --save</span><br><span class="line">npm un hexo-renderer-markdown-it --save</span><br><span class="line">npm un hexo-math                 --save</span><br><span class="line">npm un hexo-inject               --save</span><br><span class="line"><span class="comment"># 安装新的渲染器</span></span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></div></figure>        <h5 id="3-启用-quicklink-提前加载"   >          <a href="#3-启用-quicklink-提前加载" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-启用-quicklink-提前加载"></a> (3) 启用 Quicklink 提前加载</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignores:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/\/api\/?/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uri</span> <span class="string">=&gt;</span> <span class="string">uri.includes(&#x27;.xml&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uri</span> <span class="string">=&gt;</span> <span class="string">uri.includes(&#x27;.zip&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">(uri,</span> <span class="string">el)</span> <span class="string">=&gt;</span> <span class="string">el.hasAttribute(&#x27;nofollow&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">(uri,</span> <span class="string">el)</span> <span class="string">=&gt;</span> <span class="string">el.hasAttribute(&#x27;noprefetch&#x27;)</span></span><br></pre></td></tr></table></div></figure>        <h5 id="4-启用-pjax-平滑跳转"   >          <a href="#4-启用-pjax-平滑跳转" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-启用-pjax-平滑跳转"></a> (4) 启用 pjax 平滑跳转</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">elements:</span></span><br><span class="line">  <span class="attr">selectors:</span></span><br><span class="line">  <span class="attr">switches:</span></span><br><span class="line">  <span class="attr">switchesOptions:</span></span><br><span class="line">  <span class="attr">history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrollTo:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">scrollRestoration:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cacheBust:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">currentUrlFullReload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">0</span></span><br></pre></td></tr></table></div></figure>        <h5 id="5-启用本地搜索"   >          <a href="#5-启用本地搜索" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-启用本地搜索"></a> (5) 启用本地搜索</h5>      <p>    安装插件</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></div></figure><p>    在<strong>博客文件目录</strong>下的<code>.config.yml</code>加入</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.json</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>    修改<strong>主题文件目录</strong>下的<code>.config.yml</code></p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h5 id="6-启用-fancybox"   >          <a href="#6-启用-fancybox" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-启用-fancybox"></a> (6) 启用 fancybox</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></div></figure>        <h5 id="7-代码块"   >          <a href="#7-代码块" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-代码块"></a> (7) 代码块</h5>      <figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">carbon</span></span><br><span class="line">  <span class="attr">highlight:</span> <span class="string">light</span></span><br><span class="line">  <span class="attr">word_wrap:</span> <span class="literal">false</span></span><br></pre></td></tr></table></div></figure>        <h3 id="五-自主修改"   >          <a href="#五-自主修改" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#五-自主修改"></a> 五、自主修改</h3>              <h4 id="1-启用-live2d-看板娘"   >          <a href="#1-启用-live2d-看板娘" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-启用-live2d-看板娘"></a> 1. 启用 live2d 看板娘</h4>      <ul><li><p>下载依赖:<a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></div></figure></li><li><p>选择下载自己喜欢的 model:<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-hijiki</span><br></pre></td></tr></table></div></figure></li><li><p>在<strong>博客文件目录</strong>下的<code>.config.yml</code>加入</p><figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span> <span class="comment">#模板目录，直接更换名字即可</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">170</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">250</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line"><span class="attr">show:</span> <span class="literal">false</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h4 id="2-添加告示栏"   >          <a href="#2-添加告示栏" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-添加告示栏"></a> 2. 添加告示栏</h4>      <p>    将原来的 sidebar 的 div 内部再加上一个 div</p><ul><li>sidebar.pug 加入(<s>渲染不了 pug，有时间改</s>)<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- var notice_content=theme.sidebar.notice.content</span><br><span class="line">- var iconClass=theme.sidebar.notice.icon</span><br><span class="line">if page.notice !== false &amp;&amp; theme.sidebar.notice.enable</span><br><span class="line">  div.notice</span><br><span class="line">    span.notice_banner</span><br><span class="line">        i(class=iconClass)</span><br><span class="line">    span.notice_banner=&quot; NOTICE&quot;</span><br><span class="line">    br</span><br><span class="line">    notice_text.notice_text=notice_content</span><br></pre></td></tr></table></div></figure></li><li><strong>主题文件目录</strong>下的<code>.config.yml</code>的 sidebar 内加入<figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notice:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-bell</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">&quot;反复刷新界面可能导致部分js失</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h4 id="3-深色模式不同-banner-图"   >          <a href="#3-深色模式不同-banner-图" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-深色模式不同-banner-图"></a> 3. 深色模式不同 banner 图</h4>      <ul><li><strong>主题文件</strong>加入图片地址</li><li>styl 文件直接加入样式<figure class="highlight styl"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nightmode</span> <span class="selector-class">.header-banner</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="keyword">if</span> (hexo-config(<span class="string">&#x27;header.bg_image.enable&#x27;</span>) &amp;&amp; hexo-config(<span class="string">&#x27;header.bg_image.url&#x27;</span>)) &#123;</span><br><span class="line">      <span class="attribute">background</span>: url(hexo-config(<span class="string">&#x27;header.bg_image.night_url&#x27;</span>)) no-repeat center / cover;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="六-部署"   >          <a href="#六-部署" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六-部署"></a> 六、部署</h3>      <ul><li>安装依赖<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></div></figure></li><li><strong>博客文件目录</strong>下<code>.config.yml</code>加入<figure class="highlight yml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:voyage-li/voyage-li.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></div></figure></li><li>部署<figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="七-后记"   >          <a href="#七-后记" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#七-后记"></a> 七、后记</h3>      <ul><li>Thanks <a href="mailto:amandagut.94@gmail.com">amandagut.94@gmail.com</a> for your help</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将讲述我通过 hexo 以及 github page 建立本博客的过程&lt;/p&gt;

        &lt;h3 id=&quot;一-本地环境&quot;   &gt;
          &lt;a href=&quot;#一-本地环境&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-本地环境&quot;&gt;&lt;/a&gt; 一、本地环境&lt;/h3&gt;
      
&lt;ul&gt;
&lt;li&gt;Ubuntu 20.04(wsl2)&lt;/li&gt;
&lt;li&gt;hexo: 5.4.0&lt;/li&gt;
&lt;li&gt;nodejs: v13.14.0(使用过高版本会出现警告)&lt;/li&gt;
&lt;li&gt;npm: 6.14.4&lt;/li&gt;
&lt;li&gt;切换 node 版本:&lt;br /&gt;
&lt;code&gt;bash sudo n rm 16.13.1 # 删除指定版本node sudo n 13.14.0 # 安装指定版本node&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://voyage-li.github.io/tags/hexo/"/>
    
    <category term="npm" scheme="https://voyage-li.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>C++图形化扫雷</title>
    <link href="https://voyage-li.github.io/2021/08/16/mine-sweep/"/>
    <id>https://voyage-li.github.io/2021/08/16/mine-sweep/</id>
    <published>2021-08-15T16:00:00.000Z</published>
    <updated>2021-08-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>    扫雷主体部分的c++代码实现，以及Qt的简单介绍，并且通过Qt来实现扫雷游戏的图形化，鼠标点击时间的判断，信号与槽的使用，以及游戏难度的选择以及自定义和记录时间功能的添加。</p>        <h3 id="一-主体函数的c实现"   >          <a href="#一-主体函数的c实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-主体函数的c实现"></a> 一、主体函数的C++实现</h3>              <h4 id="1游戏的初始化"   >          <a href="#1游戏的初始化" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1游戏的初始化"></a> 1.游戏的初始化</h4>      <p>最简单的扫雷游戏是一个9×9的方块，因此，我们可以建立一个9×9的二维数组，先对其进行初始化，然后，在其中存储相关的数据。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 9</span></span><br><span class="line"><span class="keyword">int</span> gamedata[ROW][COL]; <span class="comment">//记录原始数据</span></span><br><span class="line"><span class="built_in">memset</span>(gamedata, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(gamedata));</span><br></pre></td></tr></table></div></figure><p>不同状态的记录，扫雷游戏每一个小块的状态可以对应表示成的不同的数字。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0~8 该方块周围的雷的数量</span></span><br><span class="line"><span class="comment">//88 该方块为雷</span></span><br><span class="line"><span class="comment">//777 该方块处于待点击状态</span></span><br></pre></td></tr></table></div></figure><span id="more"></span><p>雷的生成，简单的扫雷游戏中，会在9×9的81方块中随机生成10个雷，转化成计算机的语言就是，从1~81中任意取10个数，但是这样的选取有一定的缺点，在我们取出随机数之后，我们很难将随机数与相应的雷产生联系，带来了不必要的麻烦，解决方案是，我们可以生成十组横纵坐标1~9之间的随机数（避免重复的情况），这样下来，随机数的选取和雷的位置对应能够更加的简单，代码实现如下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOM_NUM 10</span></span><br><span class="line"><span class="keyword">int</span> boom_num_now = <span class="number">0</span>; <span class="comment">//已经生成的雷的数量</span></span><br><span class="line"><span class="keyword">while</span> (boom_num_now != BOOM_NUM)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里随机数使用了QRandomGenerator头文件中的函数</span></span><br><span class="line">    <span class="keyword">int</span> x=QRandomGenerator::<span class="built_in">global</span>()-&gt;<span class="built_in">bounded</span>(<span class="number">0</span>,ROW);   </span><br><span class="line">    <span class="keyword">int</span> y=QRandomGenerator::<span class="built_in">global</span>()-&gt;<span class="built_in">bounded</span>(<span class="number">0</span>,COL);</span><br><span class="line">    <span class="keyword">if</span> (gamedata[x][y] == <span class="number">88</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        gamedata[x][y] = <span class="number">88</span>;</span><br><span class="line">    boom_num_now++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>每一个方块周围雷数量的统计，通过一个循环来计数即可：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (gamedata[i][j] == <span class="number">88</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = i - <span class="number">1</span>; dx &lt;= i + <span class="number">1</span>; dx++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> dy = j - <span class="number">1</span>; dy &lt;= j + <span class="number">1</span>; dy++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dx &gt;= <span class="number">0</span> &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dx &lt; ROW &amp;&amp; dy &lt; COL &amp;&amp; gamedata[dx][dy] == <span class="number">88</span>)</span><br><span class="line">                     tmp++;</span><br><span class="line">             &#125;</span><br><span class="line">         gamedata[i][j] = tmp;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></div></figure><p>生成一个向玩家展示的数组，来记录每一点击产生的结果，如下所示：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> view[ROW][COL];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">        view[i][j] = <span class="number">777</span>;</span><br></pre></td></tr></table></div></figure>        <h4 id="2鼠标点击事件的判断"   >          <a href="#2鼠标点击事件的判断" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2鼠标点击事件的判断"></a> 2.鼠标点击事件的判断</h4>      <p>鼠标点击一个方块，即选择了对应左边的数据，如果选中了雷，那么游戏结束，如果选中了其他方块，则需要判断其周围有没有雷，以此来翻开其它的方块，其本质是一个深度搜索(<code>DFS</code>)，我们可以通过递归来完成这个过程，具体的思想是：</p><p>先通过循环判断点击方块一周的方块是否有雷，如果没有雷的话，就相当于我们点击了周围一圈的方块，可以直接递归调用该函数，递归返回的条件分为两种，一种是该方块已经翻开，一种是该方块周围有雷的存在，具体的代码实现如下所示：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (view[x][y] != <span class="number">777</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    view[x][y] = gamedata[x][y];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dx = x - <span class="number">1</span>; dx &lt;= x + <span class="number">1</span>; dx++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = y - <span class="number">1</span>; dy &lt;= y + <span class="number">1</span>; dy++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; ROW &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; COL)</span><br><span class="line">                <span class="keyword">if</span> (gamedata[dx][dy] == <span class="number">88</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = x - <span class="number">1</span>; dx &lt;= x + <span class="number">1</span>; dx++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> dy = y - <span class="number">1</span>; dy &lt;= y + <span class="number">1</span>; dy++)</span><br><span class="line">                <span class="keyword">if</span> (dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; ROW &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; COL)</span><br><span class="line">                    <span class="built_in">dfs</span>(dx, dy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3游戏胜利的条件判断"   >          <a href="#3游戏胜利的条件判断" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3游戏胜利的条件判断"></a> 3.游戏胜利的条件判断</h4>      <p>扫雷游戏的胜利条件判断较为简单，如果剩余的没有点击的方块数量（没有点击或者已经被标记）和雷数相同，就表示游戏取得了胜利，代码实现如下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">whetherwin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (view[i][j] == <span class="number">777</span>)</span><br><span class="line">                temp++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp == BOOM_NUM)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>至此，就完成了整个扫雷游戏的主体函数部分，再加上输入输出函数，和一些额外条件的判断，就可以得到一个基本的命令行版本的扫雷游戏。</p>        <h3 id="二-从c过渡到qt"   >          <a href="#二-从c过渡到qt" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-从c过渡到qt"></a> 二、从C++过渡到Qt</h3>              <h4 id="1窗口的搭建"   >          <a href="#1窗口的搭建" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1窗口的搭建"></a> 1.窗口的搭建</h4>      <p>打开Qt creator,新建一个Qt Widgets Application，点击mainwindow.ui进入设计界面，通过拖动左栏的窗口控件，完成图形化窗口的搭建。</p>        <h4 id="2扫雷界面的绘制"   >          <a href="#2扫雷界面的绘制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2扫雷界面的绘制"></a> 2.扫雷界面的绘制</h4>      <p><code>QPixmap</code>头文件中主要用来绘图的函数是<code>drawPixmap()</code>,根据Qt官方文档的描述，<code>drawPixmap()</code>,有多种重载函数，由于为扫雷游戏准备的资源文件已经是确定了像素的，只需要对绘图的位置和不同的图片进行选择，所以选择以下所示的重载函数。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">QPainter::drawPixmap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> QPixmap &amp;pm)</span><span class="comment">// x,y表示需要绘图位置的坐标，pm是需要绘制的图片&#123;    drawPixmap(QPointF(x, y), pm);&#125;</span></span></span><br></pre></td></tr></table></div></figure><p>使用循环，在<code>paitEvent()</code>内调用<code>drawPixmap()</code>函数即可绘制主要的窗口：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_HEIGHT 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_WIDTH 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MENU_WIDTH 26+40</span></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++)</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COL; j++)        </span><br><span class="line">        painter.<span class="built_in">drawPixmap</span>(i * BLOCK_HEIGHT, MENU_WIDTH + j * BLOCK_WIDTH, view[i][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3鼠标点击事件的具体实现"   >          <a href="#3鼠标点击事件的具体实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3鼠标点击事件的具体实现"></a> 3.鼠标点击事件的具体实现</h4>      <p>根据Qt官方文档，和鼠标点击相关的头文件是<code>QMouseEvent</code>，官方文档内，对获取鼠标点击位置的描述函数是：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">x</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">qRound</span>(l.<span class="built_in">x</span>()); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">y</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">qRound</span>(l.<span class="built_in">y</span>()); &#125;</span><br></pre></td></tr></table></div></figure><p>这样得到的位置坐标是对应的像素坐标，我们知道每一个方块的边长，通过取余数的方式可以获得具体的在扫雷游戏中的坐标</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = event-&gt;<span class="built_in">x</span>() / BLOCK_WIDTH;</span><br><span class="line"><span class="keyword">int</span> y = (event-&gt;<span class="built_in">y</span>() - MENU_WIDTH) / BLOCK_HEIGHT; <span class="comment">//需要剪掉菜单栏的距离</span></span><br></pre></td></tr></table></div></figure><p>在实际游戏时，鼠标左右键点击的效果不同，<code>QMouseEvent</code>中对鼠标点击事件的描述是</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> Qt::MouseButton <span class="title">button</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> b; &#125;</span><br></pre></td></tr></table></div></figure><p>该函数会返回一个枚举类型，对应着不同的鼠标点击，具体的实现如下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::LeftButton) &#123;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::RightButton) &#123;&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4点击数字功能实现"   >          <a href="#4点击数字功能实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4点击数字功能实现"></a> 4.点击数字功能实现</h4>      <p>Windows平台的扫雷游戏中，用户可以点击已被翻开的数字方块，如果周围所有的雷已被标记，则可以直接翻开未被标记的方块，如果标记雷的数量是正确的，但是标记的具体方块是错误的，则会直接导致游戏结束，如果已经标记的雷的数量和点击数字方块的数字不同，则直接等待下一次用户的操作。</p><p>实现该功能的思路是，先判断鼠标左键点击的位置，得到该方块周围雷的数量，然后循环周围已经被标记的雷的数量，以及标记的是否正确，如果标记错误，则可以直接触发游戏结束命令，如果标记正确且和对应的雷数量相同，则调用上文已经叙述过的<code>dfs()</code>函数，翻开方块，代码的具体实现如下所示：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::LeftButton &amp;&amp; mine-&gt;view[x][y] != <span class="number">777</span> &amp;&amp; mine-&gt;view[x][y] != <span class="number">-1</span>)</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="keyword">int</span> aim = mine-&gt;view[x][y];    </span><br><span class="line">    <span class="keyword">int</span> temp_flag = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">int</span> error = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dx = x - <span class="number">1</span>; dx &lt;= x + <span class="number">1</span>; dx++)        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = y - <span class="number">1</span>; dy &lt;= y + <span class="number">1</span>; dy++)            </span><br><span class="line">            <span class="keyword">if</span> (dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; mine-&gt;<span class="built_in">getrow</span>() &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; mine-&gt;<span class="built_in">getcolumn</span>())            </span><br><span class="line">            &#123;               </span><br><span class="line">                <span class="keyword">if</span> (mine-&gt;view[dx][dy] == <span class="number">-1</span> &amp;&amp; mine-&gt;gamedata[dx][dy] != <span class="number">88</span>)                    </span><br><span class="line">                    error = <span class="number">1</span>;                </span><br><span class="line">                <span class="keyword">if</span> (mine-&gt;view[dx][dy] == <span class="number">-1</span>)                </span><br><span class="line">                &#123;                    </span><br><span class="line">                    temp_flag++;</span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;    </span><br><span class="line">    <span class="keyword">if</span> (temp_flag == aim)    </span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">if</span> (error == <span class="number">1</span>)        </span><br><span class="line">        &#123;            </span><br><span class="line">            gameover = <span class="literal">true</span>;            </span><br><span class="line">            runtime-&gt;<span class="built_in">stop</span>();            </span><br><span class="line">            gamestart = <span class="number">1</span>;            </span><br><span class="line">            alreadyflag = <span class="number">0</span>;            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mine-&gt;<span class="built_in">getrow</span>(); i++)                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mine-&gt;<span class="built_in">getcolumn</span>(); j++)                </span><br><span class="line">                &#123;                    </span><br><span class="line">                    <span class="keyword">if</span> (mine-&gt;view[i][j] == <span class="number">-1</span> &amp;&amp; mine-&gt;gamedata[i][j] != <span class="number">88</span>)                        </span><br><span class="line">                        mine-&gt;gamedata[i][j] = <span class="number">-777</span>;                </span><br><span class="line">                &#125;            </span><br><span class="line">            <span class="built_in">repaint</span>();            </span><br><span class="line">            <span class="keyword">return</span>;        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dx = x - <span class="number">1</span>; dx &lt;= x + <span class="number">1</span>; dx++)            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> dy = y - <span class="number">1</span>; dy &lt;= y + <span class="number">1</span>; dy++)                </span><br><span class="line">                <span class="keyword">if</span> (dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; mine-&gt;<span class="built_in">getrow</span>() &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; mine-&gt;<span class="built_in">getcolumn</span>())                </span><br><span class="line">                &#123;                    </span><br><span class="line">                    <span class="keyword">if</span> (mine-&gt;view[dx][dy] == <span class="number">777</span>)                    </span><br><span class="line">                    &#123;                        </span><br><span class="line">                        <span class="built_in">dfs</span>(dx, dy);                        </span><br><span class="line">                        <span class="built_in">repaint</span>();                    </span><br><span class="line">                    &#125;                </span><br><span class="line">                &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="5程序的执行步骤"   >          <a href="#5程序的执行步骤" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5程序的执行步骤"></a> 5.程序的执行步骤</h4>      <ul><li>用户开始选择开始游戏，程序自动产生两个数组：<code>gamedata</code>和<code>view</code></li><li>程序自动给<code>gamedata</code>进行初始化，<code>view</code>的值则全部设置成为UNKNOWN，即尚未打开状态，程序根据数组<code>view</code>，将当前的游戏状态通过<code>drawPixmap()</code>绘制到窗口上</li><li>用户点击窗口，触发<code>QMouseEvent</code>，进入函数进行相应的判断，根据鼠标的左右键点击的不同，进入不同的分支</li><li>同时每次触发完鼠标点击时间之后，都进行一次是否获胜的判断。同时，定义<code>bool</code>类型的全局变量<code>gameover</code>，如果游戏已经失败或者已经z取胜，则将<code>gameover</code>设置为true，不再进入鼠标点击时间的判断。</li></ul>        <h3 id="三-额外功能的实现"   >          <a href="#三-额外功能的实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-额外功能的实现"></a> 三、额外功能的实现</h3>              <h4 id="1不同难度的选择和自定义"   >          <a href="#1不同难度的选择和自定义" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1不同难度的选择和自定义"></a> 1.不同难度的选择和自定义</h4>      <ul><li><p>传统扫雷游戏可以选择不同的难度，此次实现的扫雷游戏应该也有这个功能。为了实现这一功能，可以定义一个<code>block</code>类，以此来储存不同情况下的横宽以及雷的数量，同时，由于不同的情况下，<code>gamedata</code>和<code>view</code>的初始化不同，所以游戏的初始化也应该放在<code>block</code>类中完成。</p></li><li><p><code>block</code>类中主要定义了：扫雷游戏的长，扫雷游戏的高，扫雷游戏雷的数量，当前已经经过的时间。同时上述的成员均为<code>private</code>成员，所以同时需要定义<code>public</code>的成员函数，来一一对应，获得上述对象的值。</p></li><li><p>在整个游戏开始时，先建立一个<code>block</code>类的指针，其中第一次进入消息循环时，使用初级难度作为初始化的值、在用户选择不同难度的时侯，可以通过传给指针不同的地址，来进行处理。</p></li><li><p>首先类需要处理的是游戏的初始化，由于需要根据类的构造函数来创建数组，所以显然需要动态申请内存空间，这里可以在类中定义二维指针，然后通过<code>new</code>来动态开辟内存空间，具体实现如下（这里只展示其中一个数组的初始化方法，另外一个数组的初始化方法完全相同）：</p>  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">view = <span class="keyword">new</span> <span class="keyword">int</span> *[row];<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)    </span><br><span class="line">    view[i] = <span class="keyword">new</span> <span class="keyword">int</span>[column];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)    </span><br><span class="line">    &#123;        </span><br><span class="line">        gamedata[i][j] = <span class="number">0</span>;        </span><br><span class="line">        view[i][j] = <span class="number">777</span>;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure></li><li><p>实现用户自定义游戏难度即是要接收用户输入的数据，可以通过新建一个窗口来接收数据，但在接收数据的途中，需要注意用户输入数据的合理性。行和列数不能为负或者过大，以及用户输入的雷的数量不能多于用户输入的行列数乘积，否则会造成非法访问的问题，导致程序异常退出。</p></li></ul>        <h4 id="2剩余雷数量的计算以及呈现"   >          <a href="#2剩余雷数量的计算以及呈现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2剩余雷数量的计算以及呈现"></a> 2.剩余雷数量的计算以及呈现</h4>      <p>全局变量<code>alreadyflag</code>来记录已经被鼠标左键标记的雷的数量，同时每次检测到鼠标左键点击的时候，根据情况的不同，即时更改，同时，在每轮游戏结束时，将<code>alreadyflag</code>变量重新初始化。</p><p>雷的数量的绘制也应写在<code>paintEvent()</code>内部，获得剩余雷的数量之后，使用分支语句，直接将数字呈现给用户。需要注意的是，为了防止用户标记的雷的数量超过游戏本生雷的数量，所以在绘制前需要判断是否剩余未标记雷的数量为负值</p>        <h4 id="3游戏时间记录与绘制"   >          <a href="#3游戏时间记录与绘制" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3游戏时间记录与绘制"></a> 3.游戏时间记录与绘制</h4>      <p>Qt中与时间有关的头文件主要有<code>QTimer</code>，新建一个<code>QTimer</code>对象，通过调用<code>start()</code>函数控制Qt计时器的开始以及时间间隔，通过<code>connect()</code>函数，连接<code>timeout()</code>信号与自定义的槽函数，随着时间的变化执行相应的不同操作。</p><p>记录时间变化的槽函数可以使用<code>block</code>类的成员函数，在<code>block</code>类中初始化一<code>private</code>类型的时间变量，每次调用槽函数使该变量递增，即可记录当前时间，具体的代码实现如下：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mainwindow.cppblock </span></span><br><span class="line">*mine = <span class="keyword">new</span> <span class="built_in">block</span>(ROW, COLUMN, BOOM_NUM);runtime = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);<span class="built_in">connect</span>(runtime, <span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">on_secondadd</span>()));<span class="built_in">connect</span>(runtime, <span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">update</span>()));</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::on_secondadd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    mine-&gt;<span class="built_in">addtime</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//block.cppvoid block::addtime()&#123;    time_now++;&#125;//时间绘制部分与雷数量呈现部分相同</span></span><br></pre></td></tr></table></div></figure>        <h3 id="四-源码及素材来源"   >          <a href="#四-源码及素材来源" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-源码及素材来源"></a> 四、源码及素材来源</h3>      <p>        <a href="https://github.com/voyage-li/mine_sweep">源码</a><br />        <a href="https://github.com/fengqian-wei/qt-mine-sweeping">扫雷图片素材来源</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;    扫雷主体部分的c++代码实现，以及Qt的简单介绍，并且通过Qt来实现扫雷游戏的图形化，鼠标点击时间的判断，信号与槽的使用，以及游戏难度的选择以及自定义和记录时间功能的添加。&lt;/p&gt;

        &lt;h3 id=&quot;一-主体函数的c实现&quot;   &gt;
          &lt;a href=&quot;#一-主体函数的c实现&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-主体函数的c实现&quot;&gt;&lt;/a&gt; 一、主体函数的C++实现&lt;/h3&gt;
      

        &lt;h4 id=&quot;1游戏的初始化&quot;   &gt;
          &lt;a href=&quot;#1游戏的初始化&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1游戏的初始化&quot;&gt;&lt;/a&gt; 1.游戏的初始化&lt;/h4&gt;
      
&lt;p&gt;最简单的扫雷游戏是一个9×9的方块，因此，我们可以建立一个9×9的二维数组，先对其进行初始化，然后，在其中存储相关的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ROW 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; COL 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gamedata[ROW][COL]; &lt;span class=&quot;comment&quot;&gt;//记录原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(gamedata, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(gamedata));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;不同状态的记录，扫雷游戏每一个小块的状态可以对应表示成的不同的数字。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//0~8 该方块周围的雷的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//88 该方块为雷&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//777 该方块处于待点击状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="游戏" scheme="https://voyage-li.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="程序设计" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="扫雷" scheme="https://voyage-li.github.io/categories/%E6%B8%B8%E6%88%8F/%E6%89%AB%E9%9B%B7/"/>
    
    <category term="C++" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/C/"/>
    
    
    <category term="GUI" scheme="https://voyage-li.github.io/tags/GUI/"/>
    
    <category term="Qt" scheme="https://voyage-li.github.io/tags/Qt/"/>
    
    <category term="DFS" scheme="https://voyage-li.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>MC红石特效的原理</title>
    <link href="https://voyage-li.github.io/2021/07/18/MC-RED/"/>
    <id>https://voyage-li.github.io/2021/07/18/MC-RED/</id>
    <published>2021-07-17T16:00:00.000Z</published>
    <updated>2021-07-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单的讲一下红石特效制作的方法（教学向，不涉及各种材质包的添加什么的，尽量保证看文章之后能在mc里面用特效画出直线，曲线）</p><span id="more"></span>        <h3 id="一-教学环境"   >          <a href="#一-教学环境" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-教学环境"></a> 一、教学环境</h3>      <ul><li>版本: 1.12.2(java版)</li><li>Fabric: 不安装</li><li>Forge: 14.23.5.2855</li><li><s>不怎么清晰的头脑和不怎么协调的手</s></li></ul>        <h3 id="二-前置知识"   >          <a href="#二-前置知识" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-前置知识"></a> 二、前置知识</h3>      <ul><li>MC的基础操作（这个不用教吧）</li><li>简单的任何高级语言的使用</li><li>mcfunction的介绍<ul><li>在你的游戏存档下有这样一个文件夹<code>./data/functions/</code>，在其中你可以新建文件夹，同时在里面写一些后缀为<code>.mcfunction</code>的文件，在游戏中就可以调用内部的函数</li></ul></li><li>然后，然后我们就可以开始了！</li></ul>        <h3 id="三-生成粒子"   >          <a href="#三-生成粒子" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-生成粒子"></a> 三、生成粒子</h3>      <p>粒子的生成需要用到particle命令</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">particle &lt;粒子名称&gt; &lt;x&gt; &lt;y&gt; &lt;z&gt; [&lt;xd&gt; &lt;yd&gt; &lt;zd&gt;] [飞行速度] [粒子数量] [显示模式] [目标玩家]</span><br></pre></td></tr></table></div></figure>    <div class="note-plugin danger no-icon">            <p>mc里面的坐标和我们平常感觉的存在着点差异！</p>    </div>  <p>上面讲的有点复杂，简单来说</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">particle endRod x y z 0 0 0 0 1 force//在（z,y,x）处生成一个静止的endRod粒子</span><br><span class="line">particle endRod x y z vx vy vz r 0 force//在（z,y,x）处生成一个endRod粒子，大小为r,速度方向由vx,vy,vz决定</span><br></pre></td></tr></table></div></figure><p>到这里，其实你就已经可以在游戏里面生成了一个点了，如果你只是想知道原理，那现在，你就可以走了，再接下来的简单来说就是不断调用这个指令了。</p>        <h3 id="四-生成直线"   >          <a href="#四-生成直线" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-生成直线"></a> 四、生成直线</h3>      <ul><li>实现<br />我们已经学会了生成一个粒子了，那么很自然的我们就可以想到，只要生成连续的多个粒子，就可以获得直线<br />但是命令方块只能调用一次函数，怎么样才能够同时调用多个函数呢，这里我们就要用到刚才说的mcfunction了，在functions文件夹里面新建一个文件夹（我命名为draw），在其中新建一个文件line.mcfunction，这时候，我们就可以在其中进行编辑<br />空间中直线的参数方程:</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>v</mi><mi>x</mi></msub><mi>T</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>y</mi><mo>=</mo><msub><mi>y</mi><mn>0</mn></msub><mo>+</mo><msub><mi>v</mi><mi>y</mi></msub><mi>T</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>z</mi><mo>=</mo><msub><mi>z</mi><mn>0</mn></msub><mo>+</mo><msub><mi>v</mi><mi>z</mi></msub><mi>T</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">    \left\{        \begin{aligned}            x = x_0+v_xT \\            y = y_0+v_yT\\            z = z_0+v_zT        \end{aligned}    \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.500000000000002em;vertical-align:-2.000000000000001em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5000000000000004em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-1.6599999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.000000000000001em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li>然后就可以直接根据循环来描点了  <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体参数要改</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x1, y1, z1, x2, y2, z2;</span><br><span class="line">    std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; z2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> x, y, z;</span><br><span class="line">        x = x1 + ((x2 - x1) * i) / (<span class="number">100</span>);</span><br><span class="line">        y = y1 + ((y2 - y1) * i) / (<span class="number">100</span>);</span><br><span class="line">        z = z1 + ((z2 - z1) * i) / (<span class="number">100</span>);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;particle fireworksSpark &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; z &lt;&lt; <span class="string">&quot; 0 0 0 0 1 force&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li><li>游戏内具体调用  <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ reload <span class="comment"># 每次重写文件之后需要重新载入文件内容</span></span><br><span class="line">$ <span class="keyword">function</span> draw:line <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></div></figure></li></ul>        <h3 id="五-生成抛物线"   >          <a href="#五-生成抛物线" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#五-生成抛物线"></a> 五、生成抛物线</h3>      <p>和直线一样，写出参数方程，直接穷举就行了</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>v</mi><mi>x</mi></msub><mi>T</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><msub><mi>y</mi><mn>0</mn></msub><mo>+</mo><msub><mi>v</mi><mi>y</mi></msub><mi>T</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><msub><mi>z</mi><mn>0</mn></msub><mo>+</mo><msub><mi>v</mi><mi>z</mi></msub><mi>T</mi><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>g</mi><msup><mi>T</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{\begin{array}{l}x = x_0+v_xT \\y = y_0+v_yT\\z = z_0+v_zT-\frac{1}{2}gT^2\end{array}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6051080000000004em;vertical-align:-1.5525540000000007em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0525539999999998em;"><span style="top:-4.212554em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-3.0125539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span><span style="top:-1.8074459999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5525540000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>代码就很简单了，(<s>自己写的太乱了,不贴出来了</s>)</p>        <h3 id="六-其他曲线"   >          <a href="#六-其他曲线" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#六-其他曲线"></a> 六、其他曲线</h3>      <ul><li>只要你能写出曲线的参数方程，你就可以轻松的通过循环，得到描绘该曲线的mcfunction代码，这里就不做过多的赘述了</li><li>当然只要你愿意，你甚至可以不需要参数方程，直接通过穷举描绘图线</li></ul>        <h3 id="七-关于图像"   >          <a href="#七-关于图像" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#七-关于图像"></a> 七、关于图像</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2021/12/28/DQwyp2BG96mYaoz.png"  alt="mc02.png" />      <br />使用python，具体参数可以自己调</p>    <div class="note-plugin default no-icon">            <p>刚开始写红石特效的时候对python一窍不通，这个也是根据别人写的改的</p>    </div>  <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;&lt;填入你图片的名字&gt;.png&#x27;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;iamge.mcfunction&#x27;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">x, y, z = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">direction = <span class="string">&#x27;z&#x27;</span></span><br><span class="line">zoom_level = <span class="number">30</span></span><br><span class="line">particle_name = <span class="string">&quot;endRod&quot;</span></span><br><span class="line">particle_value = <span class="string">&quot;0 0 0 0 1 force&quot;</span></span><br><span class="line">width, height = im.size[<span class="number">0</span>], im.size[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, width):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, height):</span><br><span class="line">        imgdata = (im.getpixel((w, h)))</span><br><span class="line">        <span class="keyword">if</span> imgdata[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> direction == <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                cmd = <span class="string">f&#x27;particle <span class="subst">&#123;particle_name&#125;</span> <span class="subst">&#123;x-w/zoom_level&#125;</span> <span class="subst">&#123;y-h/zoom_level&#125;</span> <span class="subst">&#123;z&#125;</span> <span class="subst">&#123;particle_value&#125;</span>&#x27;</span></span><br><span class="line">                f.write(<span class="string">f&#x27;<span class="subst">&#123;cmd&#125;</span>\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">                cmd = <span class="string">f&#x27;particle <span class="subst">&#123;particle_name&#125;</span> <span class="subst">&#123;x - w / zoom_level&#125;</span> <span class="subst">&#123;y&#125;</span> <span class="subst">&#123;z - h / zoom_level&#125;</span> <span class="subst">&#123;particle_value&#125;</span>&#x27;</span></span><br><span class="line">                f.write(<span class="string">f&#x27;<span class="subst">&#123;cmd&#125;</span>\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">                cmd = <span class="string">f&#x27;particle <span class="subst">&#123;particle_name&#125;</span> <span class="subst">&#123;x&#125;</span> <span class="subst">&#123;y - h / zoom_level&#125;</span> <span class="subst">&#123;z - w / zoom_level&#125;</span> <span class="subst">&#123;particle_value&#125;</span>&#x27;</span></span><br><span class="line">                f.write(<span class="string">f&#x27;<span class="subst">&#123;cmd&#125;</span>\n&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></div></figure>        <h3 id="八-补充"   >          <a href="#八-补充" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#八-补充"></a> 八、补充</h3>      <p>到这里，其实还有一个没有解决的问题：如何先后呈现红石特效<br /><s>根据自己电脑性能自己看看一个区间花多少个点就行了</s></p><p>其实很简单，摆两行命令方块，中间空一行，上面一行命令方块，写入想要执行的指令，下面一行写入</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clone</span> ~ ~1 ~ ~ ~1 ~ ~1 ~1 ~ replace move <span class="comment"># 注意修改方向</span></span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2021/12/28/OqQxtkJL9Al3o8f.png"  alt="mc04.png" />      </p><p>这样，我们在中间放上红石块，红石块触发上下两个命令方块，而触发了下面的命令方块，又会将命令方块向前移动一格，从此先后触发不同的效果</p><p>如果同一个时间触发多个效果，<s>就上多个线程</s>，多几个这样的命令方块轨道就行了</p>        <h3 id="九-比较垃圾的展示"   >          <a href="#九-比较垃圾的展示" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#九-比较垃圾的展示"></a> 九、比较垃圾的展示</h3>      <ul><li>依托于worldedit实现红石音乐与红石特效的简单结合<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2021/12/28/VCeA4MQvb8yZLnX.png"  alt="mc05.png" />      </li><li>比较水的红石特效<br />        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://s2.loli.net/2021/12/28/gOBx4MnzNrVYECW.png"  alt="mc06.png" />      </li><li>祝曾经某个很可爱的朋友(不用怀疑，就是没有声音)<br /><video src='/images/mc/bir.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'><br /></video></li></ul>        <h3 id="十-后记"   >          <a href="#十-后记" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#十-后记"></a> 十、后记</h3>      <ul><li>可以使用自制的粒子来达到更好的效果</li><li>加材质包，加光影，加材质包，加光影</li><li>红石特效原理其实很简单，但是它的难点不在其实现上，而在于创新</li><li>本人对红石特效仍处于摸索阶段，如果有说的不对的地方欢迎联系</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的讲一下红石特效制作的方法（教学向，不涉及各种材质包的添加什么的，尽量保证看文章之后能在mc里面用特效画出直线，曲线）&lt;/p&gt;</summary>
    
    
    
    <category term="游戏" scheme="https://voyage-li.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="minecraft" scheme="https://voyage-li.github.io/categories/%E6%B8%B8%E6%88%8F/minecraft/"/>
    
    
    <category term="mcfunction" scheme="https://voyage-li.github.io/tags/mcfunction/"/>
    
  </entry>
  
  <entry>
    <title>Markdown转Html</title>
    <link href="https://voyage-li.github.io/2021/07/15/md-html/"/>
    <id>https://voyage-li.github.io/2021/07/15/md-html/</id>
    <published>2021-07-14T16:00:00.000Z</published>
    <updated>2021-07-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>程序设计二 大作业</strong></p></blockquote><p>    设计一款软件可以把markdown语言转化成HTML语言。即输入markdown语言，软件输出HTML语言。软件需要将GFM规范中常用到的Text，Headers，List，Images，Links五项内容转化成HTML语言。从用户的角度出发，还要拥有GUI</p>        <h3 id="一-设计思路"   >          <a href="#一-设计思路" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#一-设计思路"></a> 一、设计思路</h3>      <ul><li>打开文件(判断是否为markdown文件)</li><li>读取文件全部内容</li><li>输出html标签</li><li>选择写入的css样式</li><li>主题转换部分使用正则表达式</li><li>输出固定的结尾</li></ul><span id="more"></span>        <h3 id="二-转换方法"   >          <a href="#二-转换方法" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#二-转换方法"></a> 二、转换方法</h3>              <h4 id="1-text"   >          <a href="#1-text" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#1-text"></a> 1. Text</h4>      <p>需要转化的正文部分有加粗，斜体，删除线，简单单行代码块，高亮<br />以加粗为例，则需要完成的转化为:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo><mo>∗</mo><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mo>∗</mo><mo>∗</mo><mtext> </mtext><mo>⇒</mo><mtext> </mtext><mo>&lt;</mo><mi>b</mi><mo>&gt;</mo><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mo>&lt;</mo><mi mathvariant="normal">/</mi><mi>b</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">**info** \  \Rightarrow \  &lt;b&gt;info&lt;/b&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇒</span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p><p>转换时使用正则表达式(s为代转换字符串):</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::string temp, temp2;</span><br><span class="line"><span class="function">std::regex <span class="title">re_b</span><span class="params">(<span class="string">&quot;\\*\\*([^\\*\\*]+)\\*\\*&quot;</span>)</span></span>;</span><br><span class="line">temp = s;</span><br><span class="line">std::<span class="built_in">regex_replace</span>(std::<span class="built_in">back_inserter</span>(temp2), temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>(), re_b, <span class="string">&quot;&lt;b&gt;$1&lt;/b&gt;&quot;</span>);</span><br><span class="line">s = temp2;</span><br></pre></td></tr></table></div></figure><p>依次可完成加粗的转换，下面给出不同格式的正则表达式</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::regex <span class="title">re_i1</span><span class="params">(<span class="string">&quot;\\*([^\\*]+)\\*&quot;</span>)</span></span>;            <span class="comment">//斜体</span></span><br><span class="line"><span class="function">std::regex <span class="title">re_i2</span><span class="params">(<span class="string">&quot;\\_([^\\_]+)\\_&quot;</span>)</span></span>;            <span class="comment">//斜体</span></span><br><span class="line"><span class="function">std::regex <span class="title">re_S</span><span class="params">(<span class="string">&quot;\\~\\~([^\\~\\~]+)\\~\\~&quot;</span>)</span></span>;    <span class="comment">//删除线</span></span><br><span class="line"><span class="function">std::regex <span class="title">re_b1</span><span class="params">(<span class="string">&quot;\\*\\*([^\\*\\*]+)\\*\\*&quot;</span>)</span></span>;   <span class="comment">//加粗</span></span><br><span class="line"><span class="function">std::regex <span class="title">re_b2</span><span class="params">(<span class="string">&quot;\\_\\_([^\\_\\_]+)\\_\\_&quot;</span>)</span></span>;   <span class="comment">//加粗</span></span><br><span class="line"><span class="function">std::regex <span class="title">re_code</span><span class="params">(<span class="string">&quot;\\`([^\\`]+)\\`&quot;</span>)</span></span>;          <span class="comment">//简单代码块</span></span><br><span class="line"><span class="function">std::regex <span class="title">re_mark</span><span class="params">(<span class="string">&quot;\\=\\=([^\\=\\=]+)\\=\\=&quot;</span>)</span></span>; <span class="comment">//高亮显示</span></span><br></pre></td></tr></table></div></figure>        <h4 id="2-headers"   >          <a href="#2-headers" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#2-headers"></a> 2. Headers</h4>      <p>需要完成的转换为:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><munder><mrow><mi mathvariant="normal">#</mi><mi mathvariant="normal">#</mi><mo>⋯</mo></mrow><mo stretchy="true">⏟</mo></munder><mi>n</mi></munder><mtext>  </mtext><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>⇒</mo><mtext> </mtext><mo>&lt;</mo><mi>h</mi><mi>n</mi><mo>&gt;</mo><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>&lt;</mo><mi mathvariant="normal">/</mi><mi>h</mi><mi>n</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">\underbrace{\#\#\cdots}_{n}\ \ text \Rightarrow \  &lt;hn&gt;text&lt;/hn&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.038272em;vertical-align:-1.343832em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-1.656168em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944399999999998em;"><span class="svg-align" style="top:-2.15756em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">#</span><span class="mord">#</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8424400000000001em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.343832em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathdefault">h</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p><p>所以需要先统计’#'出现的次数，再进行转换:</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tr_head</span><span class="params">(std::string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[index] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        index++;</span><br><span class="line">    std::smatch answer;</span><br><span class="line">    std::<span class="built_in">regex_match</span>(s, answer, std::<span class="built_in">regex</span>(<span class="string">&quot;^#&#123;1,6&#125; (.+)$&quot;</span>));</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;&lt;h&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; answer[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;&lt;/h&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot;&gt;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3-images"   >          <a href="#3-images" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#3-images"></a> 3. Images</h4>      <p>需要完成的转换</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">!</mo><mo stretchy="false">[</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>u</mi><mi>r</mi><mi>l</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⇒</mo><mtext> </mtext><mo>&lt;</mo><mi>i</mi><mi>m</mi><mi>g</mi><mtext>  </mtext><mi>s</mi><mi>r</mi><mi>c</mi><mo>=</mo><mi mathvariant="normal">‘</mi><mi mathvariant="normal">‘</mi><mi>u</mi><mi>r</mi><mi>l</mi><mi mathvariant="normal">&quot;</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">![name](url) \  \Rightarrow \ &lt;img\ \ src=``url&quot;&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">!</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇒</span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">‘</span><span class="mord">‘</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">&quot;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p><p>转换方法同前面类似，下面给出识别的正则表达式</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::regex <span class="title">re_image</span><span class="params">(<span class="string">&quot;!\\[.+\\]\\((.+)\\)&quot;</span>)</span></span>;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-links"   >          <a href="#4-links" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#4-links"></a> 4. Links</h4>      <p>需要完成的转换</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>u</mi><mi>r</mi><mi>l</mi><mo stretchy="false">)</mo><mtext> </mtext><mo>⇒</mo><mtext> </mtext><mo>&lt;</mo><mi>a</mi><mtext>  </mtext><mi>h</mi><mi>r</mi><mi>e</mi><mi>f</mi><mo>=</mo><mi mathvariant="normal">‘</mi><mi mathvariant="normal">‘</mi><mi>u</mi><mi>r</mi><mi>l</mi><mi mathvariant="normal">&quot;</mi><mo>&gt;</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>&lt;</mo><mi mathvariant="normal">/</mi><mi>a</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">[name](url) \  \Rightarrow \ &lt;a\ \ href=``url&quot;&gt;name&lt;/a&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">⇒</span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">‘</span><span class="mord">‘</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">&quot;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></span></p><p>直接给出正则表达式</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::regex <span class="title">re_image</span><span class="params">(<span class="string">&quot;\\[.+\\]\\((.+)\\)&quot;</span>)</span></span>;</span><br></pre></td></tr></table></div></figure>        <h4 id="5-lists"   >          <a href="#5-lists" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#5-lists"></a> 5. Lists</h4>      <ul><li>整个翻译开始前先进行列表的递归搜索</li><li>先判断是否是列表，然后返回一个奇数或者偶数来代表判断返回的是有序列表还是无序列表，同时该数据还能储存空行数</li><li>若是列表，则判断与上一级的前面空格的关系，判断是否是新的一级列表，进入下一次递归，若上一级列表已经结束，则回溯到同一级列表处</li><li>整个列表结束时，返回，输出结尾的<code>&lt;/ol&gt;</code>或则和<code>&lt;/ul&gt;</code>，结束递归</li></ul><p>具体的代码如下</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">islist</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//判断是否为列表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function">std::regex <span class="title">a</span><span class="params">(<span class="string">&quot;^[ ]*[-*+] (.+)$&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">std::regex <span class="title">e</span><span class="params">(<span class="string">&quot;^[ ]*\\d+[.] (.+)$&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">regex_search</span>(content[i], e))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; content[i][j] == <span class="string">&#x27; &#x27;</span>; j++)</span><br><span class="line">            index++;</span><br><span class="line">        <span class="keyword">if</span> (index % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            content[i] = std::<span class="built_in">regex_replace</span>(content[i], e, <span class="string">&quot;&lt;li&gt;$1&lt;/li&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (std::<span class="built_in">regex_search</span>(content[i], a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; content[i][j] == <span class="string">&#x27; &#x27;</span>; j++)</span><br><span class="line">            index++;</span><br><span class="line">        <span class="keyword">if</span> (index % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            content[i] = std::<span class="built_in">regex_replace</span>(content[i], a, <span class="string">&quot;&lt;li&gt;$1&lt;/li&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">blankjudge</span><span class="params">(<span class="keyword">int</span> a)</span><span class="comment">//判断空格无序还是有序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (a - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">handlelist</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> blanklast)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    now = i;</span><br><span class="line">    <span class="keyword">int</span> blankthis = <span class="built_in">islist</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (blankthis == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> blankthis_temp = <span class="built_in">blankjudge</span>(blankthis);</span><br><span class="line">        <span class="keyword">int</span> blanklast_temp = <span class="built_in">blankjudge</span>(blanklast);</span><br><span class="line">        <span class="keyword">if</span> (blankthis % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (blankthis_temp &gt; blanklast_temp || (blankthis_temp == blanklast_temp &amp;&amp; blankthis != blanklast))<span class="comment">//新的一层列表</span></span><br><span class="line">            &#123;</span><br><span class="line">                content[i].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;&lt;ol&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">handlelist</span>(i + <span class="number">1</span>, blankthis);</span><br><span class="line">                <span class="keyword">if</span> (tmp == blankthis_temp)</span><br><span class="line">                    tmp = <span class="built_in">handlelist</span>(now + <span class="number">1</span>, blankthis);</span><br><span class="line">                content[now - <span class="number">1</span>] += <span class="string">&quot;&lt;/ol&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (blankthis_temp == blanklast_temp &amp;&amp; blankthis == blanklast)<span class="comment">//和上级相同</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">handlelist</span>(i + <span class="number">1</span>, blankthis);</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//上一级列表结束</span></span><br><span class="line">                <span class="keyword">return</span> blankthis_temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//同理</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (blankthis_temp &gt; blanklast_temp || (blankthis_temp == blanklast_temp &amp;&amp; blankthis != blanklast))</span><br><span class="line">            &#123;</span><br><span class="line">                content[i].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">handlelist</span>(i + <span class="number">1</span>, blankthis);</span><br><span class="line">                <span class="keyword">if</span> (tmp == blankthis_temp)</span><br><span class="line">                    tmp = <span class="built_in">handlelist</span>(now + <span class="number">1</span>, blankthis);</span><br><span class="line">                content[now - <span class="number">1</span>] += <span class="string">&quot;&lt;/ul&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (blankthis_temp == blanklast_temp &amp;&amp; blankthis == blanklast)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">handlelist</span>(i + <span class="number">1</span>, blankthis);</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> blankthis_temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="6-quote"   >          <a href="#6-quote" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#6-quote"></a> 6. Quote</h4>      <p>quote的转化和list基本相同，同时免去了有序无序的判断</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isquote</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::regex <span class="title">a</span><span class="params">(<span class="string">&quot;^\\&gt;+(.+)$&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">regex_match</span>(content[i], a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (content[i][index] == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">            index++;</span><br><span class="line">        content[i] = std::<span class="built_in">regex_replace</span>(content[i], a, <span class="string">&quot;&lt;p&gt;$1&lt;/p&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handlequote</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    now = i;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="built_in">isquote</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (number &gt;= last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; number - last; j++)</span><br><span class="line">            content[i].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;&lt;blockquote&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">handlequote</span>(now + <span class="number">1</span>, number);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; number - last; j++)</span><br><span class="line">            content[now - <span class="number">1</span>] += <span class="string">&quot;&lt;/blockquote&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="7-分割线"   >          <a href="#7-分割线" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#7-分割线"></a> 7. 分割线</h4>      <p>较为简单，直接给出转换函数</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (std::<span class="built_in">regex_search</span>(s.<span class="built_in">at</span>(i), std::<span class="built_in">regex</span>(<span class="string">&quot;^\\-&#123;3,&#125;$&quot;</span>)))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&lt;hr/&gt;\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (std::<span class="built_in">regex_search</span>(s.<span class="built_in">at</span>(i), std::<span class="built_in">regex</span>(<span class="string">&quot;^\\*&#123;3,&#125;$&quot;</span>)))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&lt;hr/&gt;\n&quot;</span>);</span><br></pre></td></tr></table></div></figure>        <h3 id="三-gui的实现"   >          <a href="#三-gui的实现" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#三-gui的实现"></a> 三、GUI的实现</h3>      <p>依托Qt实现程序的图形化，相关内容可查看源码</p>        <h3 id="四-实验感想"   >          <a href="#四-实验感想" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#四-实验感想"></a> 四、实验感想</h3>      <ul><li>学习了markdown及html相关语法</li><li>熟悉了正则表达式的使用</li><li>熟悉了c++图形化界面的设计</li></ul>        <h3 id="五-源码"   >          <a href="#五-源码" class="heading-link"><i class="fas fa-link"></i></a><a class="markdownIt-Anchor" href="#五-源码"></a> 五、源码</h3>      <p>        <a href="https://github.com/voyage-li/markdown-html">戳这里</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;程序设计二 大作业&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;    设计一款软件可以把markdown语言转化成HTML语言。即输入markdown语言，软件输出HTML语言。软件需要将GFM规范中常用到的Text，Headers，List，Images，Links五项内容转化成HTML语言。从用户的角度出发，还要拥有GUI&lt;/p&gt;

        &lt;h3 id=&quot;一-设计思路&quot;   &gt;
          &lt;a href=&quot;#一-设计思路&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-设计思路&quot;&gt;&lt;/a&gt; 一、设计思路&lt;/h3&gt;
      
&lt;ul&gt;
&lt;li&gt;打开文件(判断是否为markdown文件)&lt;/li&gt;
&lt;li&gt;读取文件全部内容&lt;/li&gt;
&lt;li&gt;输出html标签&lt;/li&gt;
&lt;li&gt;选择写入的css样式&lt;/li&gt;
&lt;li&gt;主题转换部分使用正则表达式&lt;/li&gt;
&lt;li&gt;输出固定的结尾&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="程序设计" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="C++" scheme="https://voyage-li.github.io/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/C/"/>
    
    
    <category term="正则表达式" scheme="https://voyage-li.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="GUI" scheme="https://voyage-li.github.io/tags/GUI/"/>
    
    <category term="Qt" scheme="https://voyage-li.github.io/tags/Qt/"/>
    
  </entry>
  
</feed>
